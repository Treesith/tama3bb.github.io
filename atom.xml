<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AngularJS Ninja]]></title>
  <link href="http://angularjsninja.com/atom.xml" rel="self"/>
  <link href="http://angularjsninja.com/"/>
  <updated>2013-09-02T16:42:46+09:00</updated>
  <id>http://angularjsninja.com/</id>
  <author>
    <name><![CDATA[Akihito Tamagawa]]></name>
    <email><![CDATA[tama3bb@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS 基礎の基礎]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/02/angularjs-basics-ngapp-ngmodel/"/>
    <updated>2013-09-02T16:39:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/02/angularjs-basics-ngapp-ngmodel</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS 基礎</h2>

<p>しばらく AngularJS の基礎的なことを中心に書いていく。</p>

<p>AngularJS の基礎として、まず <a href="http://angularjs.org/#the-basics">AngularJS のページ</a> で一番初めにあるコードから、AngularJS に関する部分を簡単に。</p>

<!-- more -->


<hr />

<div ng-app>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js"></script>
  <label>Name:</label>
  <input type="text" ng-model="yourName" placeholder="Enter a name here">
  <hr>
  <h1>Hello {{yourName}}!</h1>
</div>


<hr />

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">ng-app</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;label&gt;</span>Name:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;yourName&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Enter a name here&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;hr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h1&gt;</span>Hello {{yourName}}!<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><a href="http://docs.angularjs.org/api/ng.directive:ngApp"><code>ng-app</code></a></p>

<ul>
<li>AngularJS が動作する範囲を指定。</li>
<li>ページ全体とする場合は<code>&lt;html ng-app&gt;</code>とし、<code>&lt;head&gt;</code>を対象外とするなら<code>&lt;body ng-app&gt;</code>とする。</li>
<li>より限定的に、<code>&lt;div ng-app&gt;</code>でも構わない。</li>
</ul>
</li>
<li><p><a href="http://docs.angularjs.org/api/ng.directive:ngModel"><code>ng-model</code></a></p>

<ul>
<li>フォームとモデルをリンクし、どちらかでの変更を他方に反映する。</li>
<li>この例の場合はテキストボックスへの入力値が即座に yourName プロパティに反映される。</li>
</ul>
</li>
<li><p><code>{{yourName}}</code></p>

<ul>
<li>yourName プロパティの値を HTML に表示するコード。</li>
<li>yourName プロパティの変更が即座に反映される。</li>
</ul>
</li>
</ul>


<p>この例は、<a href="http://jsfiddle.net/api/post/library/pure/">jsFiddle</a> でコードを編集して試すことができる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularFire でリアルタイムアプリケーション]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/01/angularfire-realtime-chat-app/"/>
    <updated>2013-09-01T00:29:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/01/angularfire-realtime-chat-app</id>
    <content type="html"><![CDATA[<hr />

<p><img src="http://angularfire.com/img/afire-logo.png" alt="AngularFire" /></p>

<p>Firebase の AngularJS 向け API、<a href="http://angularfire.com">AngularFire</a> のページが公開されたばかりで、ちょうどいい機会なのでリアルタイムチャットアプリケーションの実装がどれほど簡単にできるのかを見ておく。</p>

<!-- more -->


<hr />

<h2>AngularFire とは</h2>

<p><a href="http://angularfire.com">AngularFire</a> とは、Firebase による AngularJS のアプリケーションを高速に実装するためのサービスで、バックエンドのコードを書く必要も、サーバをセットアップする必要も無く、ただフロントエンドの実装に集中できる。</p>

<p>AngularFire の API を利用することで、AngularJS のモデルが自動的に同期（保存・更新）される。AngularJS の強みの 1 つである 2-way データバインドを、サーバ側にまで拡張する 3-way データバインドと言える。</p>

<hr />

<h2>Firebase とは</h2>

<p><a href="https://www.firebase.com">Firebase</a> とは、サーバ管理不要で、高速・スケーラブル・リアルタイムなバックエンドを提供するサービス。一定の転送量・接続数・容量まで無料で、クレジッドカード無しで始めることができる。</p>

<hr />

<h2>概要</h2>

<p>Firebase の URL とモデルを関連付けすることで、アプリケーションを利用しているすべてのクライアント（ブラウザ）を同期させる。</p>

<p>まず、<code>firebase.js</code>と<code>angularfire.js</code>を参照。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdn.firebase.com/v0/firebase.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdn.firebase.com/libs/angularfire/0.3.0/angularfire.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>AngularJS の app モジュールが依存するモジュールとして、<code>firebase</code>を記述。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myapp</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myapp&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;firebase&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>同期</h2>

<p>Firebase とモデルを同期化させるコード。すべてのローカルでの変更が自動的に Firebase に送信され、すべてのリモートでの変更が即座にローカルのモデルに反映される。</p>

<p><code>angularFire</code>を controller が依存するサービスとして記述。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myapp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;MyCtrl&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="s1">&#39;angularFire&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">MyCtrl</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">angularFire</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Firebase の参照を、<code>$scope</code>のモデルにバインド。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">ref</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Firebase</span><span class="p">(</span><span class="s1">&#39;https://&lt;my-firebase&gt;.firebaseio.com/items&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">angularFire</span><span class="p">(</span><span class="nx">ref</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">,</span> <span class="s1">&#39;items&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>マークアップで普通にモデルを利用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">ng-controller=</span><span class="s">&quot;MyCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;item in items&quot;</span><span class="nt">&gt;</span>: <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Firebase からのデータは非同期にロードされ、サーバからのデータロードの通知には promise が利用できる。ローカルで実施したモデルへの変更は、AngularFire が自動的にリモートのデータとマージする。</p>

<p>モデルのデータ変更についても普通に実装。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// モデルに直接新しいアイテムを追加</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Firebase&quot;</span><span class="p">,</span> <span class="nx">desc</span><span class="o">:</span> <span class="s2">&quot;is awesome!&quot;</span><span class="p">});</span>
</span><span class='line'><span class="c1">// $scope に function を定義し、directive からのモデル操作も可</span>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">removeItem</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">items</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">toRemove</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">toRemove</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>なお、同期のタイミングを制御する API も用意されている。詳しくは、AngularFire の Documentation ページで <a href="http://angularfire.com/documentation.html#explicit">Explicit Data Binding</a> を参照。</p>

<hr />

<h1>まとめ</h1>

<p>AngularFire の<a href="http://angularfire.com">トップページ</a>にチャットアプリケーションを実装した 30 行のコードが掲載されている。また、そこでチャットアプリケーションのデモを確認できる。</p>

<p>たったこれだけの簡単なコードで、AngularJS のモデルをサーバに同期させ、すべてのクライアントに即座に同期させるリアルタイムアプリケーションを実装することができる。</p>

<p>AngularJS の勉強会をするなら、ハンズオンの題材としてちょうどよさそう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yeoman generator for AngularJS]]></title>
    <link href="http://angularjsninja.com/blog/2013/08/31/yeoman-generator-for-angularjs/"/>
    <updated>2013-08-31T00:25:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/08/31/yeoman-generator-for-angularjs</id>
    <content type="html"><![CDATA[<hr />

<p><img src="https://github-camo.global.ssl.fastly.net/10c0f69d03b7ac184d77e8aaba4358a2d4791823/687474703a2f2f79656f6d616e2e696f2f6d656469612f79656f6d616e2d6d617374686561642e706e67" alt="Yeoman" /></p>

<h2>AngularJS 用 Yeoman ジェネレータ</h2>

<p>Yeoman チームがベストプラクティスだと言っているプロジェクト構成を、AngularJS 用の Yeoman ジェネレータで実際に生成して確認する。</p>

<!-- more -->


<hr />

<h2>yo (Yeoman) と generator-angular をインストール</h2>

<p>まず yo (Yeoman) をインストール。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g yo</span></code></pre></td></tr></table></div></figure>


<p>次に、AngularJS 用の Yeoman ジェネレータ generator-angular をインストール。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g generator-angular</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>AngularJS プロジェクトを生成</h2>

<p>新しいディレクトリを作って、そのディレクトリに移動。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir my-new-project && cd $_</span></code></pre></td></tr></table></div></figure>


<p><code>yo angular</code> を実行（アプリケーション名を付けれる）。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yo angular [app-name]</span></code></pre></td></tr></table></div></figure>


<p>で、Twitter Bootstrap を含めるか、SCSS を使うか、angular-resource.js, angular-cookies.js, angular-sanitiaze.js のモジュールを含めるかといった質問に答える。</p>

<p>すると、うお、そんなに？ってぐらいにターミナルが流れに流れて my-new-project ディレクトリに山ほどのサブディレクトリとファイルができている。</p>

<hr />

<h2>生成したプロジェクトの構成を確認</h2>

<p>とりあえずプロジェクト構成のことだけに絞って、ここでは app ディレクトリの下を確認。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app/
</span><span class='line'>├── 404.html
</span><span class='line'>├── bower_components
</span><span class='line'>│   ├── angular
</span><span class='line'>│   ├── angular-cookies
</span><span class='line'>│   ├── angular-mocks
</span><span class='line'>│   ├── angular-resource
</span><span class='line'>│   ├── angular-sanitize
</span><span class='line'>│   ├── angular-scenario
</span><span class='line'>│   ├── bootstrap-sass
</span><span class='line'>│   ├── es5-shim
</span><span class='line'>│   ├── jquery
</span><span class='line'>│   └── json3
</span><span class='line'>├── favicon.ico
</span><span class='line'>├── index.html
</span><span class='line'>├── robots.txt
</span><span class='line'>├── scripts
</span><span class='line'>│   ├── app.js
</span><span class='line'>│   └── controllers
</span><span class='line'>│       └── main.js
</span><span class='line'>├── styles
</span><span class='line'>│   ├── bootstrap.css
</span><span class='line'>│   └── main.css
</span><span class='line'>└── views
</span><span class='line'>    └── main.html</span></code></pre></td></tr></table></div></figure>


<p>目新しいのは bower_components の存在。これは、パッケージマネジメントツール <a href="http://bower.io">Bower</a> でインストールするときにできるディレクトリの名前。Yeoman は Bower を使っている。</p>

<p>肝心の scripts ディレクトリの下がスッカスカなので、先に進む。</p>

<hr />

<h2>サブジェネレータでいろいろ生成</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yo angular:controller myController
</span><span class='line'>yo angular:directive myDirective
</span><span class='line'>yo angular:filter myFilter
</span><span class='line'>yo angular:service myService</span></code></pre></td></tr></table></div></figure>


<p>これで、scripts ディレクトリはこうなる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app/scripts/
</span><span class='line'>├── app.js
</span><span class='line'>├── controllers
</span><span class='line'>│   ├── main.js
</span><span class='line'>│   └── myController.js
</span><span class='line'>├── directives
</span><span class='line'>│   └── myDirective.js
</span><span class='line'>├── filters
</span><span class='line'>│   └── myFilter.js
</span><span class='line'>└── services
</span><span class='line'>    └── myService.js</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>プロジェクト構成のまとめ</h2>

<p>ということで、やっぱり controller、directive、filter、service に分けて、あとはサブディレクトリを作るなり、細かく単機能ごとにファイルを分けていくということで。</p>

<p>ちなみに、どれだけファイルをバラして作ったとしても、<a href="http://gruntjs.com">Grunt</a> でビルドすれば minify された 1 つの JS ファイルになるので心配ご無用！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS のプロジェクト構成をどうするか]]></title>
    <link href="http://angularjsninja.com/blog/2013/08/30/angularjs-project-structure/"/>
    <updated>2013-08-30T20:00:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/08/30/angularjs-project-structure</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS のプロジェクト構成ってどうするのがいいんだ？</h2>

<p>AngularJS でアプリケーションを作るときに悩むのがプロジェクト構成。なんでもかんでも一つの JavaScript ファイルで実装してしまうことも可能だけれど、コード量が増えてくるとすぐにつらくなる。</p>

<p>そこでどうしようかなと考えるときに参照するであろう一つが <a href="https://github.com/angular?tab=members">AngularJS チーム</a> による AngularJS Web アプリケーションのスケルトンプロジェクト <a href="https://github.com/angular/angular-seed">angular-seed</a>。</p>

<!-- more -->


<hr />

<h2>Angular Seed</h2>

<p>この angular-seed のプロジェクト構成はこんな感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app
</span><span class='line'>├─ css
</span><span class='line'>│  └─ app.css
</span><span class='line'>├─ img
</span><span class='line'>├─ js
</span><span class='line'>│  ├─ app.js
</span><span class='line'>│  ├─ controllers.js
</span><span class='line'>│  ├─ directives.js
</span><span class='line'>│  ├─ filters.js
</span><span class='line'>│  └─ services.js
</span><span class='line'>├─ lib
</span><span class='line'>│  └─ angular
</span><span class='line'>│     └─ angular.js
</span><span class='line'>├─ partials
</span><span class='line'>│  ├─ partial1.html
</span><span class='line'>│  └─ partial2.html
</span><span class='line'>├─ index-async.html
</span><span class='line'>└─ index.html</span></code></pre></td></tr></table></div></figure>


<p>簡単に言うと、AngularJS の機能である controller、directive、filter、service と機能別にファイルを分けるということ。</p>

<p>前回の<a href="http://angularjsninja.com/blog/2013/08/28/how-to-declare-models/">モデル定義の記事</a>、前々回の<a href="http://angularjsninja.com/blog/2013/08/29/angularjs-web-api-call/">サービス定義の記事</a>で利用した factory は service の仲間なので services.js に書くことになる。</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  <span class="c">&lt;!-- In production use:</span>
</span><span class='line'><span class="c">  &lt;script src=&quot;//ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js&quot;&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">  --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;lib/angular/angular.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/services.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/controllers.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/filters.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/directives.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>まあ、これでもいいんだけれど、大規模になってくるともっとファイルを分けたくなってくる。</p>

<p>特に partials の下にある HTML テンプレートは分割しているのに、それに対応するコントローラはすべて controllers.js に記述していくことに抵抗感が出てくる。</p>

<p>また、services.js にモデルを記述するのではなく、モデルごとにファイルを分けてモデルの名前をファイル名に付けたくなる。</p>

<p>そこで、あるべき姿、ベストプラクティスはどんな構成なんだとネットをさまよう。</p>

<hr />

<h2>Building Huuuuuge Apps with AngularJS</h2>

<p>大規模な AngularJS についての記事では <a href="http://briantford.com/blog/huuuuuge-angular-apps.html">Building Huuuuuge Apps with AngularJS</a> が参考になる。この記事は <a href="https://twitter.com/briantford">Brian Ford</a> さんによるもの。</p>

<p>ここで推奨されている構成はこんな感じ。</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>root-app-folder
</span><span class='line'>├─ index.html
</span><span class='line'>├─ scripts
</span><span class='line'>│  ├─ controllers
</span><span class='line'>│  │  └─ main.js
</span><span class='line'>│  │  └─ ...
</span><span class='line'>│  ├─ directives
</span><span class='line'>│  │  └─ myDirective.js
</span><span class='line'>│  │  └─ ...
</span><span class='line'>│  ├─ filters
</span><span class='line'>│  │  └─ myFilter.js
</span><span class='line'>│  │  └─ ...
</span><span class='line'>│  ├─ services
</span><span class='line'>│  │  └─ myService.js
</span><span class='line'>│  │  └─ ...
</span><span class='line'>│  ├─ vendor
</span><span class='line'>│  │  ├─ angular.js
</span><span class='line'>│  │  ├─ angular.min.js
</span><span class='line'>│  │  ├─ es5-shim.min.js
</span><span class='line'>│  │  └─ json3.min.js
</span><span class='line'>│  └─ app.js
</span><span class='line'>├─ styles
</span><span class='line'>│  └─ ...
</span><span class='line'>└─ views
</span><span class='line'>   ├─ main.html
</span><span class='line'>   └─ ...
</span></code></pre></td></tr></table></div></figure>


<p>で、さらにやるなら、controllers や services にサブディレクトリを、例えば、services/models みたいに作ると。</p>

<p>angular-seed と大きく異なるのは各機能をフォルダにしているところで、controller や service の一つひとつを別のファイルにしやすい。</p>

<p>なぜ lib &ndash;> vendor、css &ndash;> styles、js &ndash;> scripts、partials &ndash;> views に変更しているのかは不明。流儀があるのかな。</p>

<hr />

<h2>Yeoman</h2>

<p>また、この Brian Ford さんが関わっている <a href="http://yeoman.io">Yeoman</a> という Web アプリケーションのワークフローを改善するためのツール群があって、<a href="https://github.com/yeoman/generator-angular">yeoman/generator-angular</a> という AngularJS 用の Yeoman ジェネレータがある。</p>

<p>Yeoman がベストプラクティスと考えるプロジェクト構成で出力されるので、これを利用し、まず従ってみてから、自分の頭で考えるというのもいいと思う。</p>

<p>この Yeoman を利用したプロジェクト構成のことや、Yeoman のページに出てくる Grunt、Bower などのツール類の話はまたあらためて。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS で Web API を呼び出すコードをまとめる]]></title>
    <link href="http://angularjsninja.com/blog/2013/08/29/angularjs-web-api-call/"/>
    <updated>2013-08-29T08:42:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/08/29/angularjs-web-api-call</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS で Web API を呼び出すコードをまとめる</h2>

<p>AngularJS で Web API を呼び出す $http などを利用するコードを、各 controller に散らして実装してしまわずに、どこかに集約しておきたいぞって場合の話。</p>

<!-- more -->




<figure class='code'><figcaption><span>services.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;NinjaService&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">search</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/search&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">params</span><span class="o">:</span> <span class="nx">params</span><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">search</span><span class="o">:</span> <span class="nx">search</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>controllers.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;NinjaController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">NinjaService</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">search</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">NinjaService</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="nx">params</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">results</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">results</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じで、XxxService とかいう名前でサービスを factory 使って宣言しておけば、同じコードを複数の controller で利用したいときに便利だし、Web API 呼び出しのコードがまとまることで見通しやすくなる。</p>

<p>このコードに出てくる params については、search メソッドのクエリパラメータとして検索条件を渡してるイメージなだけで、詳細は省略。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS ではモデルをどう宣言すればいいのか]]></title>
    <link href="http://angularjsninja.com/blog/2013/08/28/how-to-declare-models/"/>
    <updated>2013-08-28T07:48:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/08/28/how-to-declare-models</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS の ng-model、大事なのは dot があること</h2>

<p>AngularJS では、モデルをどこに宣言すればいいんだってのがわかりにくい。</p>

<p>controller に $scope があって、簡単なサンプルコードでは大抵そこに直接<code>$scope.name</code>みたいに記述されているので、同じように書いてしまう。</p>

<!-- more -->


<p>うまくいかないコード例は以下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- うまくいかないコード --&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;ParentController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;parent&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;ChildController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;child&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ParentController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{});</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ChildController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{});</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコードでは、parent テキストボックスに入力した値が child テキストボックスにも同期され、一見うまくいくように思ってしまう。ところが、一度でも child テキストボックスに値を入力すると、別のスコープになってその後まったく同期されなくなる。</p>

<p>うまくいくコードは以下。大事なのは dot があること。dot があることによって、参照が同じになって、両方のテキストボックスの値が同期され続ける。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- うまくいくコード --&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;ParentController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;parent&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;aModel.name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;ChildController&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;child&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;aModel.name&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>AngularJS のモデルは factory で宣言</h2>

<p>さて、ちゃんとモデルを宣言したい場合はどう書けばいいのか。さきほどの例で言えば、aModel はどこでどう宣言しておくことができるのか。</p>

<p>答えは factory で、以下のようなコード。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;aModel&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、どこにだって DI して使えるようになるので、<strong>親子の関係にない controller 間でも同期</strong>させることができるモデルとなる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ExampleController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">aModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">aModel</span> <span class="o">=</span> <span class="nx">aModel</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>この factory のモデルはシングルトンです、はい。</p>

<p><code>app.controller</code>とか<code>app.factory</code>の app って何なのかとか、DI って何なのかとか基本的なところを飛ばしてますが、その辺はまたあらためて。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[非表示（ng-show/ng-hide）にしてもサーバにアクセスしてる…]]></title>
    <link href="http://angularjsninja.com/blog/2013/08/27/ngshow-nghide-ngswitch/"/>
    <updated>2013-08-27T10:33:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/08/27/ngshow-nghide-ngswitch</id>
    <content type="html"><![CDATA[<hr />

<h2>ng-show / ng-hide のポイント</h2>

<p>ng-show / ng-hide は、HTML 要素を boolean 条件で表示・非表示を制御できる便利な directive で、ほんと使える。</p>

<p>例えば、サムネイルを非表示にしたいときは、ng-show（または ng-hide）に boolean 値を渡すこんなコードを書くだけ。<code>settings.imageVisible=false</code>ということ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-show=</span><span class="s">&quot;settings.imageVisible&quot;</span> <span class="na">class=</span><span class="s">&quot;img-polaroid&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;img</span> <span class="na">ng-src=</span><span class="s">&quot;assets/img/anImage.png&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでページに表示されなくなって Okay !</p>

<p>なんだけど、表示されてなくても画像ファイルにはアクセスしてるようす…。これは、ng-show / ng-hide の表示制御は、CSS の<code>display: none;</code>を要素に適用しているだけだから。jQuery の<code>hide()</code>とか、Bootstrap の<code>class="hide"</code>と同じ。</p>

<!-- more -->


<p>ホバーですぐに表示したいとかいう場合は、非表示のうちにバックグラウンドで画像を取得しておくメリットがあるので、そんなときにはこれでいい。だけど非表示にしたとこはムダに動いてほしくないってときはどうするか。</p>

<hr />

<h2>ng-switch で解決（1.2 未満）</h2>

<p>非表示にしてるところに動作してほしくないときは、ng-show / ng-hide ではなく、ng-switch でうまくいく。ng-switch で非表示となるときは、該当の HTML 要素が DOM からいなくなるので。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-switch</span> <span class="na">on=</span><span class="s">&quot;settings.imageVisible&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-switch-when=</span><span class="s">&quot;true&quot;</span> <span class="na">class=</span><span class="s">&quot;img-polaroid&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;img</span> <span class="na">ng-src=</span><span class="s">&quot;assets/img/anImage.png&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h2>1.2 以降は ng-if</h2>

<p>AngularJS のバージョン 1.2（現時点では RC1）がリリースされ、今回の例のように boolean で決まるときには、新しく追加された ng-if を使うことになってるんだと思う（未検証）ので、すぐにでも必要なくなる TIPS かもしれない。</p>

<p>ng-if など、1.2 で追加された API のことはまた別の機会に。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Ninja の巻物]]></title>
    <link href="http://angularjsninja.com/blog/2013/08/26/angularjs-ninja-scroll/"/>
    <updated>2013-08-26T11:58:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/08/26/angularjs-ninja-scroll</id>
    <content type="html"><![CDATA[<hr />

<p><img src="https://raw.github.com/angular/angular.js/master/images/logo/AngularJS.exports/AngularJS-medium.png" title="AngularJS" alt="AngularJS" /></p>

<h2>AngularJS とは</h2>

<blockquote><p>AngularJS（アンギュラージェイエス）は、Google とコミュニティによって開発されているオープンソースの JavaScript フレームワークである。ブラウザ上で動作するウェブアプリケーションの開発に MVC アーキテクチャを取り入れることを目的としている。MIT Licenseでライセンスされたフリーソフトウェアである。<ref><a href="http://ja.wikipedia.org/wiki/AngularJS">Wikipedia</a></ref></p></blockquote>

<p>つまり、AngularJS とは、</p>

<ul>
<li>Google</li>
<li>JavaScript MVC フレームワーク</li>
<li>オープンソース（MIT ライセンス）</li>
</ul>


<p>という特徴があって、数多く出ている JavaScript のフレームワークの中で、人気がある一つ。</p>

<!-- more -->


<hr />

<h2>誰が書くのか</h2>

<p>私ひとりで。</p>

<ul>
<li>フロントエンドに熱いプログラマ</li>
<li>英語そこそこできる</li>
<li>フリーランス</li>
</ul>


<hr />

<h2>何を書くのか</h2>

<ul>
<li>AngularJS の機能紹介、TIPS、トラブルシューティング</li>
<li>AngularJS と併せて利用しているライブラリの紹介</li>
<li>海外での AngularJS ブログ等の要約</li>
<li>質問への回答、勉強会などの告知</li>
</ul>


<hr />

<h2>いつ書くのか</h2>

<ul>
<li>週に数回</li>
</ul>


<hr />

<h2>どこで書くのか</h2>

<ul>
<li>自宅</li>
<li><a href="http://kc-i.jp/facilities/salon/">ナレッジサロン</a></li>
</ul>


<hr />

<h2>なぜ書くのか</h2>

<ul>
<li>AngularJS すごいから</li>
<li>AngularJS 楽しいから</li>
<li>AngularJS 普及するとうれしいから</li>
<li>AngularJS の情報交換したいから</li>
</ul>

]]></content>
  </entry>
  
</feed>
