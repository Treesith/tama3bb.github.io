<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AngularJS Ninja]]></title>
  <link href="http://angularjsninja.com/atom.xml" rel="self"/>
  <link href="http://angularjsninja.com/"/>
  <updated>2013-11-29T17:03:37+09:00</updated>
  <id>http://angularjsninja.com/</id>
  <author>
    <name><![CDATA[Akihito Tamagawa]]></name>
    <email><![CDATA[tama3bb@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS Directive なんてこわくない（その４）]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/29/angularjs-custom-directives/"/>
    <updated>2013-11-29T15:33:32+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/29/angularjs-custom-directives</id>
    <content type="html"><![CDATA[<hr />

<h2>controller, require</h2>

<p><a href="http://angularjsninja.com/blog/2013/11/20/angularjs-custom-directives/">その１</a>、<a href="http://angularjsninja.com/blog/2013/11/22/angularjs-custom-directives/">その２</a>、<a href="http://angularjsninja.com/blog/2013/11/27/angularjs-custom-directives/">その３</a>に引き続き、今回もカスタム directive について。</p>

<p>今回のサンプルコードは、UI Bootstrap の <a href="https://github.com/angular-ui/bootstrap/tree/master/src/tabs">Tabs</a> からの一部抜粋で、<code>controller</code> <code>require</code>オプションについて見ていく。</p>

<figure class='code'><figcaption><span>tabs.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;ui.bootstrap.tabs&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;TabsetController&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">TabsetCtrl</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ctrl</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">tabs</span> <span class="o">=</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">tabs</span> <span class="o">=</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">tabs</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">ctrl</span><span class="p">.</span><span class="nx">select</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tab</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">tabs</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tab</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">tab</span><span class="p">.</span><span class="nx">active</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">tab</span><span class="p">.</span><span class="nx">active</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">}])</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;tabset&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;EA&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">transclude</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">replace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">require</span><span class="o">:</span> <span class="s1">&#39;^tabset&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">scope</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;TabsetController&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;template/tabs/tabset.html&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">compile</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">elm</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">transclude</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">tabsetCtrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;tab&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;$parse&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$parse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">require</span><span class="o">:</span> <span class="s1">&#39;^tabset&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;EA&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">replace</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;template/tabs/tab.html&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">transclude</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">scope</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">heading</span><span class="o">:</span> <span class="s1">&#39;@&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">onSelect</span><span class="o">:</span> <span class="s1">&#39;&amp;select&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">onDeselect</span><span class="o">:</span> <span class="s1">&#39;&amp;deselect&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nx">compile</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">elm</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">transclude</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">function</span> <span class="nx">postLink</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">elm</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">tabsetCtrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;active&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">active</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">setActive</span><span class="p">(</span><span class="nx">scope</span><span class="p">.</span><span class="nx">$parent</span><span class="p">,</span> <span class="nx">active</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">active</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">tabsetCtrl</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">scope</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">scope</span><span class="p">.</span><span class="nx">onSelect</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">scope</span><span class="p">.</span><span class="nx">onDeselect</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">select</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">scope</span><span class="p">.</span><span class="nx">disabled</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">scope</span><span class="p">.</span><span class="nx">active</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="nx">tabsetCtrl</span><span class="p">.</span><span class="nx">addTab</span><span class="p">(</span><span class="nx">scope</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">scope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;$destroy&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">tabsetCtrl</span><span class="p">.</span><span class="nx">removeTab</span><span class="p">(</span><span class="nx">scope</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}])</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>controller</h2>

<p>directive にも<code>ng-controller</code>で利用するときに定義するのと同じような<code>controller</code>を記述でき、<code>$scope</code>や<code>$http</code>などをインジェクト（DI）することもできる。directive の場合でも、<code>controller</code>では DOM 操作するコードは記述しないようにし、<code>compile</code>または <code>link</code>のほうに記述する。</p>

<p>なお、directive の<code>controller</code>には、モジュールで定義した<code>controller</code>の名前を記述することができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;tabset&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...,</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;TabsetController&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意すべき点としては、再利用されるコンポーネントとして directive を作成する場合、<code>controller</code>に付ける名前が重複されにくい名前にしておくこと。</p>

<p><code>controller</code>に名前を付けずに、直接 function を記述することもできる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;tabset&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">...,</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;$scope&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}],</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>$scope</code>だけでなく<code>$http</code>や<code>$timeout</code>などをインジェクト（DI）できる。また、directive の<code>controller</code>では<code>$element</code> <code>$attrs</code> <code>$transclude</code>の service をインジェクトできるようになっている。</p>

<p><code>link</code>でも<code>controller</code>でも、どちらでも同じような処理を記述することができそうに思う。違う点は、DI を利用できるか否かと、処理のタイミング（<code>controller</code>が先で、<code>link</code>が後）。使い分けのヒントとしては、子要素など別の directive から呼び出すのであれば<code>controller</code>として API を公開する感じで実装し、そうでなければ<code>link</code>で実装するという感じで。</p>

<h2>require</h2>

<p>ネストされた directive から親の directive の<code>controller</code>で定義された API を呼び出すには<code>require</code>が必要となる。</p>

<p>上のコード例では、<code>require: '^tabset'</code>の記述があり、これによって<code>tabset</code> directive の<code>controller</code>である<code>tabsetCtrl</code>を参照して API を利用できるようになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">compile</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">elm</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">transclude</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span> <span class="nx">postLink</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">elm</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">tabsetCtrl</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">tabsetCtrl</span><span class="p">.</span><span class="nx">select</span><span class="p">(</span><span class="nx">scope</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">tabsetCtrl</span><span class="p">.</span><span class="nx">addTab</span><span class="p">(</span><span class="nx">scope</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">tabsetCtrl</span><span class="p">.</span><span class="nx">removeTab</span><span class="p">(</span><span class="nx">scope</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>なお、<code>^</code>を付けない場合、親階層ではなく directive を指定した要素の<code>controller</code>を探すこととなる。このケースでよく使うのは<code>require: 'ngModel'</code>で、directive と同じ要素に<code>ng-model="..."</code>の記述があることを前提として実装できることになる。</p>

<p>同じ要素に<code>ng-model</code>属性の記述が無い場合、こんなエラーになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="p">[</span><span class="nx">$compile</span><span class="o">:</span><span class="nx">ctreq</span><span class="p">]</span> <span class="nx">Controller</span> <span class="s1">&#39;ngModel&#39;</span><span class="p">,</span> <span class="nx">required</span> <span class="nx">by</span> <span class="nx">directive</span> <span class="s1">&#39;input&#39;</span><span class="p">,</span> <span class="nx">can</span><span class="err">&#39;</span><span class="nx">t</span> <span class="nx">be</span> <span class="nx">found</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>


<p>このエラーを発生させる必要が無いなら、<code>require: '?ngModel'</code>のように<code>?</code>を付けて記述する。</p>

<h2>これでもうカスタム directive を書ける</h2>

<p>この４回目で<code>controller</code>と<code>require</code>を使って、複数の directive でコンポーネントを構成することについての理解も進んだので、どんどん directive を活用していこう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Directive なんてこわくない（その３）]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/27/angularjs-custom-directives/"/>
    <updated>2013-11-27T12:02:43+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/27/angularjs-custom-directives</id>
    <content type="html"><![CDATA[<hr />

<h2>replace, transclude, scope</h2>

<p><a href="http://angularjsninja.com/blog/2013/11/20/angularjs-custom-directives/">前々回</a>、<a href="http://angularjsninja.com/blog/2013/11/22/angularjs-custom-directives/">前回</a>に引き続き、今回もカスタム directive について。</p>

<p>今回のサンプルコードは、UI Bootstrap の <a href="https://github.com/angular-ui/bootstrap/tree/master/src/alert">Alert</a> からで、<code>replace</code> <code>transclude</code> <code>scope</code>オプションについて見ていく。</p>

<figure class='code'><figcaption><span>alert.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;ui.bootstrap.alert&quot;</span><span class="p">,</span> <span class="p">[]).</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;alert&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span><span class="s1">&#39;EA&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span><span class="s1">&#39;template/alert/alert.html&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">transclude</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">replace</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">scope</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;=&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">close</span><span class="o">:</span> <span class="s1">&#39;&amp;&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">iElement</span><span class="p">,</span> <span class="nx">iAttrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">scope</span><span class="p">.</span><span class="nx">closeable</span> <span class="o">=</span> <span class="s2">&quot;close&quot;</span> <span class="k">in</span> <span class="nx">iAttrs</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>template/alert/alert.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;alert&quot;</span> <span class="na">ng-class=</span><span class="s">&quot;type &amp;&amp; &#39;alert-&#39; + type&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">ng-show=</span><span class="s">&quot;closeable&quot;</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">class=</span><span class="s">&quot;close&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;close()&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;times;</span><span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">ng-transclude</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;alert</span> <span class="na">ng-repeat=</span><span class="s">&quot;alert in alerts&quot;</span> <span class="na">type=</span><span class="s">&quot;alert.type&quot;</span> <span class="na">close=</span><span class="s">&quot;closeAlert($index)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  {{alert.msg}}
</span><span class='line'><span class="nt">&lt;/alert&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>replace</h2>

<p><code>template</code>または<code>templateUrl</code>で指定された HTML のフラグメントは、デフォルトでは directive を指定した要素の内側に append される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;alert</span> <span class="err">...</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&#39;alert&#39;</span> <span class="err">...</span><span class="nt">&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/alert&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコード例のように、directive を要素として指定できるよう<code>restrict</code>に<code>'E'</code>を含めるときには、HTML として不適当な要素名が記述されることになるため、<code>replace: true</code>を指定する前提で directive を設計しよう。</p>

<p><code>replace: true</code> を指定することによって、directive を指定した要素自体を置き換えることができるので、directive がコンパイルされた結果は以下のようなコードとなる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-class=</span><span class="s">&quot;type &amp;&amp; &#39;alert-&#39; + type&quot;</span> <span class="na">class=</span><span class="s">&quot;alert ng-scope&quot;</span> <span class="na">close=</span><span class="s">&quot;closeAlert($index)&quot;</span> <span class="na">type=</span><span class="s">&quot;alert.type&quot;</span> <span class="na">ng-repeat=</span><span class="s">&quot;alert in alerts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;close()&quot;</span> <span class="na">class=</span><span class="s">&quot;close&quot;</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">ng-show=</span><span class="s">&quot;closeable&quot;</span><span class="nt">&gt;</span>×<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">ng-transclude=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">&quot;ng-scope ng-binding&quot;</span><span class="nt">&gt;</span>Another alert!<span class="nt">&lt;/span&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>replace: true</code> の場合、 directive を指定した要素にある属性は、テンプレート側のルート要素にコピーされる。なので、<code>ng-repeat="alert in alerts"</code>や<code>type="alert.type"</code>、<code>close="closeAlert($index)"</code>も有効となる。</p>

<p>両方に class 属性があるケースでは、両方の class 属性値をいい感じにマージしてくれる。</p>

<h2>transclude</h2>

<p><code>transclude</code>には、<code>true</code>または<code>'element'</code>を指定でき、directive とした要素の内容を、テンプレートの一部として利用できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">transclude</span><span class="o">:</span> <span class="kc">true</span> <span class="c1">// directive 要素の内容（内側）をテンプレートで利用</span>
</span><span class='line'><span class="nx">transclude</span><span class="o">:</span> <span class="s1">&#39;element&#39;</span> <span class="c1">// directive 要素ごとテンプレートで利用</span>
</span></code></pre></td></tr></table></div></figure>


<p>テンプレート側に ng-transclude を指定した要素の内側に append できる。上記サンプルコードの例では、<code>{{alert.msg}}</code>が<code>&lt;div ng-transclude&gt;</code>の内側に append される。</p>

<p>上記コード例では、<code>alert</code>directive の内側部分<code>{{alert.msg}}</code>が、<code>ng-transclude</code>に append されていることがわかる（<code>alert.msg: 'Another alert!'</code>という前提）。</p>

<h2>scope</h2>

<p>scope には、以下の３種類の指定方法がある。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">scope</span><span class="o">:</span> <span class="kc">false</span> <span class="c1">// directive が利用される場所での scope を利用（デフォルト）</span>
</span><span class='line'><span class="nx">scope</span><span class="o">:</span> <span class="kc">true</span> <span class="c1">// directive が利用される場所での scope を継承する、新たな scope を生成</span>
</span><span class='line'><span class="nx">scope</span><span class="o">:</span> <span class="p">{...}</span> <span class="c1">// directive が利用される場所での scope を継承しない、独立した新たな scope を生成</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>scope: true</code>が指定されている代表的な directive は<code>ng-controller</code>で、ご存知のとおり<code>ng-controller</code>を利用すると scope を継承する新たな scope が生成される。これにより、親の scope にあるデータや function を利用したり、オーバーライドしたりできるようになる。</p>

<p>一方で、コンポーネントとして再利用可能な directive を設計するには、directive を利用する場所での scope による影響を受けない分離・独立した scope を生成したい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">scope</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;@&#39;</span><span class="p">,</span> <span class="c1">// interpolate（値、string）</span>
</span><span class='line'>  <span class="nx">info</span><span class="o">:</span> <span class="s1">&#39;=&#39;</span><span class="p">,</span> <span class="c1">// data bind</span>
</span><span class='line'>  <span class="nx">cancel</span><span class="o">:</span> <span class="s1">&#39;&amp;&#39;</span> <span class="c1">// expression（function）</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように、<code>scope</code>にオブジェクトを記述することで、この directive が利用されるたびに<code>name</code> <code>info</code> <code>cancel</code>のみ存在する新たな scope が生成される。</p>

<p>なお、directive を利用する側と、テンプレート側とで異なる名前を使いたいときは、以下のように記述することができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">scope</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">customerInfo</span><span class="o">:</span> <span class="s1">&#39;=info&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こうすることで、テンプレート内では<code>customerInfo</code>を、directive を利用する要素での属性名には<code>info</code>を利用できるようになる。</p>

<h2>４回目へ向けて</h2>

<p>この３回目で、再利用のための directive を記述する方法が理解できた。もう Directive なんてこわくない！</p>

<p>なんだけど、<a href="http://angularjsninja.com/blog/2013/11/29/angularjs-custom-directives/">４回目</a>でも引き続き、<code>controller</code> <code>require</code>といった directive のプロパティを扱う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Directive なんてこわくない（その２）]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/22/angularjs-custom-directives/"/>
    <updated>2013-11-22T13:37:02+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/22/angularjs-custom-directives</id>
    <content type="html"><![CDATA[<hr />

<h2>compile と link</h2>

<p><a href="http://angularjsninja.com/blog/2013/11/20/angularjs-custom-directives/">前回</a>に引き続き、今回もカスタム directive について。</p>

<p>２回目の今回は、<code>compile</code>と<code>link</code>の使い分けについて。</p>

<h2>compile のサンプルコード</h2>

<p>まずは<code>compile</code>を利用するサンプルコードを、『<a href="http://www.amazon.co.jp/dp/B00EQ67J30">Mastering Web Application Development with AngularJS</a>』から抜粋して見ていく。</p>

<p>このコードでは、Bootstrap の理由を前提として、以下に示すように Bootstrap でのボタンデザインに必要な CSS class の値を追加する処理を、<code>compile</code>で実装している。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myModule</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">compile</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">element</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;btn&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;submit&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">element</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;btn-primary&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">attrs</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">element</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;btn-&#39;</span> <span class="o">+</span> <span class="nx">attrs</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>&lt;button&gt;</code>の class 属性に<code>btn</code>を追加</li>
<li><code>&lt;button type="submit"&gt;</code>のように <code>type="submit"</code>がある場合には、class 属性に<code>btn-primary</code>を追加</li>
<li><code>&lt;button size="..."&gt;</code>のように size 属性がある場合には、<code>btn-large</code>など、<code>btn-</code> と size 属性で指定した文字列を組み合わせた文字列を class 属性に追加</li>
</ul>


<p>コードからわかるように、compile オプションの function 第１引数にある<code>element</code>は、jQuery（jqLite）オブジェクトになっているので、直接 jQuery の API を利用できる。つまり<code>$(element)</code>や、<code>$(button)</code>などとしてやる必要はない。</p>

<p>第２引数の<code>attrs</code>では<code>attrs.size</code>のようにドット区切りで属性値にアクセスできるので、HTML テンプレート側の値を簡単に参照することができる。</p>

<!-- more -->


<h2>compile の流れ</h2>

<p>AngularJS が HTML テンプレートをコンパイルするために、標準の directives とカスタム定義した directives のすべてを、DOM の要素・属性・コメント・CSS class から探し出す。各 directive の<code>compile</code>function を呼び出し、<code>compile</code>function から返される<code>link</code>function を後で呼び出すために集めていく流れとなる。</p>

<p>なお、directives をコンパイルしていく処理の順序は<code>priority</code>の大きい順となるが、これについてはまた別の機会に先送り。</p>

<p>重要なポイントとしては、<code>compile</code>の処理は scope ができる前の処理であり、<code>compile</code>function では scope を利用できない。</p>

<p>すべてのコンパイル処理が終わった後、生成した scope を付けて<code>link</code>function を呼び出す流れとなり、この時点で<code>link</code>function の scope を利用した DOM との間での双方向バインドが効くことになる。</p>

<h2>compile と link の使い分け</h2>

<p><code>ng-repeat</code>の内側にある directive というケースなど、同じ directive が繰り返し使われることになるような場合では、<code>compile</code>の function は<code>ng-repeat</code>の繰り返しに関係なく一度だけ呼び出されるのに対し、<code>link</code>の function はイテレーションのたびに呼び出されることになる。</p>

<p>これは、scope のデータや双方向バインドに依存ぜずに処理できる上記のサンプルコードのようなケースであれば、<code>compile</code>を使うことで同じ処理を繰り返す無駄を省くように最適化できることになる。</p>

<p><code>compile</code>と<code>link</code>の両方を指定した場合には<code>link</code>が無視される仕様になっているため、両方を利用した実装をしたい場合には<code>compile</code>function から<code>link</code>function を return するよう実装することになる。</p>

<h2>link のサンプルコード</h2>

<p>ここから、最もよく利用することになる<code>link</code>の書き方について見ていく。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myModule</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;myDirective&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">scope</span><span class="p">.</span><span class="nx">$watch</span><span class="p">(</span><span class="s1">&#39;xxxVar&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="nx">scope</span><span class="p">.</span><span class="nx">$on</span><span class="p">(</span><span class="s1">&#39;xxxEvent&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように、<code>link</code>では、<code>scope</code>にあるモデルの変更を検知して処理することや、イベントに応じた処理を記述して、DOM や controller とのやり取りを記述していく。</p>

<h2>いろいろある link の書き方</h2>

<p>Directives では<code>link</code>の書き方にバリエーションがあるので、ざっと眺めておく。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myModule</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;returnLinkFunction&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>まず、単に<code>function</code>を return するだけという書き方ができて、これは<code>link</code>プロパティだけを持つオブジェクトを返しているのと同じことになる。<code>link</code>以外のプロパティを指定する必要が無ければ、こう書くことでシンプルなコードにできる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myModule</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;usingLinkOption&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">link</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>これはオブジェクト（DDO: Directive Definition Object）を返す書き方で、<code>compile</code>プロパティを使わない場合の書き方。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">myModule</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;usingCompileOption&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">compile</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>      <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後に、<code>compile</code>プロパティを使う場合の書き方で、<code>compile</code>function で return している<code>function</code>が<code>link</code>function として扱われることになる。</p>

<h2>３回目へ向けて</h2>

<p>この２回目で compile と link の使い分けができるようになったので、ここまでの知識でとりあえず directive を使っていろいろ実装していけるんじゃないかと思う。</p>

<p>けれども、<code>replace</code> <code>transclude</code> <code>scope</code> <code>controller</code> <code>require</code>といった大事なプロパティを抑えてないので、ここで終わったら directive こわいままになっちゃうので、<a href="http://angularjsninja.com/blog/2013/11/27/angularjs-custom-directives/">３回目</a>に続く。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Directive なんてこわくない（その１）]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/20/angularjs-custom-directives/"/>
    <updated>2013-11-20T12:08:23+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/20/angularjs-custom-directives</id>
    <content type="html"><![CDATA[<hr />

<p>独自（カスタム）directive の話は複雑でボリュームがあるので、何回かに分けることにして、まずは<a href="http://angularjsninja.com/blog/2013/11/19/angularjs-nginclude/">前回の ng-include</a> の流れを受けて、とりあえず HTML を分割することから始めてみよう。</p>

<h2>単にテンプレート部分を Directive にするには</h2>

<p>繰り返し出てくるコード部分を、テンプレートとして directive で宣言するサンプルコード。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ninja-customer</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;Ninja&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;ninjaCustomer&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;partials/ninja-customer.html&#39;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんだけなので、まあどってことない。これだけなら ng-include のほうがラクでいいやんってことになるかな。でもまあ、とりあえずこんだけしか書かなくても directive として動作するのかってことを見ておく。</p>

<!-- more -->


<h2>要素として使う Directive としたければ</h2>

<p>デフォルトでは属性（<code>restrict: 'A'</code>）として使う directive として作られる。なので、要素として HTML で指定する directive にしたければ、<code>restrict</code> オプションが必要になる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ninja</span><span class="na">-customer</span><span class="nt">&gt;</span><span class="err">&lt;</span>/ninja-customer&gt;
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;Ninja&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;ninjaCustomer&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;partials/ninja-customer.html&#39;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>restrict</code>オプションを指定する場合の選択肢として、覚えておけばいいのは以下の３種類。<code>A</code>は Attribute（属性）で、<code>E</code>は Element（要素）。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;A&#39;</span> <span class="c1">// 属性のみ（デフォルト）</span>
</span><span class='line'><span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;E&#39;</span> <span class="c1">// 要素のみ</span>
</span><span class='line'><span class="nx">restrict</span><span class="o">:</span> <span class="s1">&#39;AE&#39;</span> <span class="c1">// 属性または要素</span>
</span></code></pre></td></tr></table></div></figure>


<p>属性と要素、どちらを選択するかについては、まとまったコンポーネントとして directive を位置付けるケースでは要素とし、既存の要素に機能を足すようなケースでは属性とするのがいいぽい。</p>

<p>Directive の定義で return するオブジェクトに、オプションとして記述していく記述スタイルで、<code>restrict</code>や<code>templateUrl</code>の他に、<code>link</code>、<code>replace</code>、<code>transclude</code>、<code>scope</code>、<code>controller</code>など使えるオプションがあるんだけれど、ひとまず後回し。</p>

<h2>どんなときにカスタム Directive を作るか</h2>

<p>Controllers と AngularJS 標準の各種 directive を使えば大抵のことはできてしまうのと、directive の仕様が複雑すぎてわかりにくということで、AngularJS を使っていてもカスタム directive は手付かずだったり、作ってみてもこれでいいのか自信ないなって感じになりがちかなと。</p>

<p>カスタム directive は、例えば jQuery（jqLite）などで直接 DOM を操作したいときや、繰り返し出てくるコードをリファクタリングしてまとめたいときに利用するのがいい。</p>

<p>なお、AngularJS のアプリケーションでも jQuery を利用できることについては、過去エントリ「<a href="http://angularjsninja.com/blog/2013/10/05/jquery-to-angularjs/">jQuery と AngularJS</a>」に記載しているように、jQuery を先読みすればその jQuery が使え、jQuery 無しでも AngularJS が持つ jQuery のサブセット jqLite で DOM 操作のコードが同じように記述できる。</p>

<p>さらに、複数のプロジェクトでの再利用を目指してコンポーネント化するなら <a href="http://angular-ui.github.io/bootstrap/">UI Bootstrap</a> のコードを参考に、複雑な directive の作成に取り組んでいきたいところ。</p>

<h2>Directive とは何か</h2>

<p>AngularJS で一番強力な機能と言え、HTML が持っていない意味合いや振る舞いを加えるように使うことができる。AngularJS 標準の<code>ng-bind</code>や<code>ng-model</code>、<code>ng-view</code>とかはすべて directive であって、controllers や services に記述したアプリケーションロジックを、属性や要素として DOM 要素にバインドできるようになる。</p>

<p>簡単に言うと、データバインドするモデルやイベントハンドリングするロジックを、DOM に紐付けるためのものということ。</p>

<h2>標準 Directive</h2>

<p>AngularJS には標準（ビルトイン）の directives がたくさん存在し、公式サイトの <a href="http://docs.angularjs.org/api/ng#directive">ng (core module) ページ Directive</a> には、<code>ng-include</code>、<code>ng-controller</code>、<code>ng-click</code>などよく使う<code>ng</code>で始まるものだけでなく、普通の HTML のように見える<code>a</code>、<code>form</code>や<code>input</code>なども directive として記載されている。</p>

<p>たとえば<code>a</code>については href 属性値が空のときにはデフォルトの動作が防止されるよう処理されたり、<code>form</code>だと name 属性があれば scope のほうでその名前で参照できるように処理されたりする。</p>

<p>form には HTML で form を入れ子にできるよう<code>ng-form</code>があったり、<code>ng-submit</code>の機能、<code>ng-invalid</code>や<code>ng-dirty</code>などの機能についても触れたくなるけれど、その辺のことはまた別の機会に。</p>

<h2>Directives の記述</h2>

<p>Directives は JavaScript では camelCase で宣言し、HTML では小文字ハイフン区切りの lower-case で参照する。</p>

<p>HTML では４種類の参照方法があるものの、基本的には要素か属性として記述する以下の２種類。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;my</span><span class="na">-directive</span><span class="nt">&gt;</span><span class="err">&lt;</span>/my-directive&gt;
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">my-directive</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>HTML の validation ツールを使いたければ<code>data-</code>を付けておくといい。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;span</span> <span class="na">ng-bind=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;span</span> <span class="na">data-ng-bind=</span><span class="s">&quot;name&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Directives の接頭辞</h2>

<p>カスタム directive の名前には、念のため接頭辞（ng を避ける）を付けておくほうがいいかもしれない。将来、偶然 HTML 標準として追加される要素名と重なってしまうケースや、AngularUI や AngularStrap などサードパーティ製の directives と重なってしまうケースもありえるので。</p>

<h2>次回へ向けて</h2>

<p>え、そんなちょっとしか記述しなくても directive として成立してるんだ、ってことを見てもらうのが初回の目的なので、ひとまずここで終了。</p>

<p>こんなとこで終わったら、directive こわいままになっちゃうので、なんとしてでも<a href="http://angularjsninja.com/blog/2013/11/22/angularjs-custom-directives/">次回</a>も続けないと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSでHTMLを分割するのにお手軽なng-include]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/19/angularjs-nginclude/"/>
    <updated>2013-11-19T09:17:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/19/angularjs-nginclude</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS で HTML を分割するのにお手軽な ng-include</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-include=</span><span class="s">&quot;&#39;partials/sidebar.html&#39;&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ng</span><span class="na">-include</span> <span class="na">src=</span><span class="s">&quot;&#39;partials/sidebar.html&#39;&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>/ng-include&gt;
</span></code></pre></td></tr></table></div></figure>


<p>ポイントとしては、属性値に文字列を渡す必要があって、ダブルクオートの内側にシングルクオートを記述すること。</p>

<p>変数を渡して、可変にもできる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">sidebarUrl</span> <span class="o">=</span> <span class="s1">&#39;partials/sidebar.html&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-include=</span><span class="s">&quot;sidebarUrl&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ng-include</code>で表示する HTML 部分でも、もちろん普通に AngularJS の管理下にあり、データバインドも効く。分割したフラグメント専用に controller の scope を作るなら、<code>ng-controller</code>も指定できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-include=</span><span class="s">&quot;&#39;partials/sidebar.html&#39;&quot;</span> <span class="na">ng-controller=</span><span class="s">&quot;SidebarCtrl&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h2>分割した HTML は $templateCache でキャッシュしてくれる</h2>

<p>分割した HTML は、通信して取得した時点で AngularJS が $templateCache で（メモリに）保持するため、分割されている部分を表示するたびに取得する通信が発生するわけではない。</p>

<p>かつ、必要となった時点で取得しにいくレイジーローディングなので、ユーザがまったく表示しない部分であれば、１度も取得しにいかないので効率的でもある。</p>

<p>一方で、Grunt などでビルドする時に、この HTML フラグメントを一つのファイルにしてしまい、一括してロードさせることでネットワークでのロスを下げるという方向で工夫もできる。</p>

<p>スクリプトとして HTML テンプレートを記述する場合は、script 要素に<code>type</code>と<code>id</code>を指定する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;scipt</span> <span class="na">type=</span><span class="s">&quot;text/ng-template&quot;</span> <span class="na">id=</span><span class="s">&quot;templateId.html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  This is the content of the template
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>初期処理でテンプレートを<code>$templateCache</code>に<code>put</code>するようにしておけば、その分だけ操作性の向上も期待できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">myApp</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;Ninja&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'><span class="nx">myApp</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$templateCache</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$templateCache</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;templateId.html&#39;</span><span class="p">,</span> <span class="s1">&#39;This is the content of the template&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>お手軽に断片化できる ng-include の紹介でしたが、HTML を分割する手段としては他にも ng-view の routing で templateUrl を指定することや、custom directive を作成することもできるので、次回以降でその辺も触れる（たぶん）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSで増殖現象に出会ったらng-ifを疑おう]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/16/angularjs-ngif-proliferation/"/>
    <updated>2013-11-16T02:11:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/16/angularjs-ngif-proliferation</id>
    <content type="html"><![CDATA[<hr />

<h2>増殖現象にビビる</h2>

<p>UI Bootstrap の <a href="http://angular-ui.github.io/bootstrap/#/alert">alert</a> と、<a href="https://github.com/angular-app/angular-app">angular-app</a> あたりを参考にしながらメッセージ表示機能を実装していたら、どんどんメッセージが増殖してくのでビビった。１件メッセージを追加するたびに、メッセージ配列ごと増えるという…。</p>

<h2>増殖現象デモ</h2>

<script src="http://angularjsninja.com//code.angularjs.org/1.2.0/angular.min.js"></script>


<script src="http://angularjsninja.com//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.6.0/ui-bootstrap.min.js"></script>


<script src="http://angularjsninja.com//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.6.0/ui-bootstrap-tpls.min.js"></script>


<script>
angular.module('Ninja', ['ui.bootstrap'])
  .controller('NotificationsCtrl', function($scope) {
    $scope.i = 0;
    $scope.notifications = [];
    $scope.addMessage = function(message, type) {
      $scope.notifications.push({
        message: message + $scope.i++,
        type: type || 'error'
      });
    };
  });
</script>


<div ng-app="Ninja" ng-controller="NotificationsCtrl" ng-cloak>
  <a href="" ng-click="addMessage('message:')">Add a message: {{i}}</a>　← 何回かクリック！
  <div ng-if="notifications.length">
    <alert type="notification.type" ng-repeat="notification in notifications">
      {{notification.message}}
    </alert>
  </div>
</div>




<!-- more -->


<h2>サンプルコード</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//code.angularjs.org/1.2.0/angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.6.0/ui-bootstrap.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.6.0/ui-bootstrap-tpls.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;Ninja&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ui.bootstrap&#39;</span><span class="p">])</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;NotificationsCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">notifications</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="nx">$scope</span><span class="p">.</span><span class="nx">addMessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">message</span><span class="p">,</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">notifications</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">message</span><span class="o">:</span> <span class="nx">message</span> <span class="o">+</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">i</span><span class="o">++</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">:</span> <span class="nx">type</span> <span class="o">||</span> <span class="s1">&#39;error&#39;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-app=</span><span class="s">&quot;Ninja&quot;</span> <span class="na">ng-controller=</span><span class="s">&quot;NotificationsCtrl&quot;</span> <span class="na">ng-cloak</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;addMessage(&#39;message:&#39;)&quot;</span><span class="nt">&gt;</span>Add a message: {{i}}<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-if=</span><span class="s">&quot;notifications.length&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;alert</span> <span class="na">type=</span><span class="s">&quot;notification.type&quot;</span> <span class="na">ng-repeat=</span><span class="s">&quot;notification in notifications&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      {{notification.message}}
</span><span class='line'>    <span class="nt">&lt;/alert&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ng-if には truthy じゃなく、true / false をちゃんと渡そう</h2>

<p>はじめは ng-repeat のバグなのかなと思っていたら、その外側の要素ごと増殖していってることに気付いた。つまり ng-if が怪しい。</p>

<p>上記のコードでの ng-if は、notifications 配列が空っぽだったら要素ごと消しとこうってことで付けている。その ng-if に truthy な（別の）値を渡すと増殖現象になってしまうようだ。</p>

<p>そんなわけで、ちゃんと true / false にして渡しましょう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>NG: <span class="nt">&lt;div</span> <span class="na">ng-if=</span><span class="s">&quot;notifications.length&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>OK: <span class="nt">&lt;div</span> <span class="na">ng-if=</span><span class="s">&quot;!!notifications.length&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>てことで、増殖現象に出会ったら、この記事のことを思い出してくださーい。</p>

<p>追記：AngularJS <a href="https://github.com/angular/angular.js/blob/master/CHANGELOG.md#121-underscore-empathy-2013-11-14">1.2.1 underscore-empathy</a> で、早速バグフィックスされましたね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSのng-classを使いこなそう]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/12/angularjs-ngclass/"/>
    <updated>2013-11-12T16:16:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/12/angularjs-ngclass</id>
    <content type="html"><![CDATA[<hr />

<h2>ng-class とは</h2>

<p><a href="http://docs.angularjs.org/api/ng.directive:ngClass">ng-class</a> は、HTML 要素に CSS class 属性値を動的にセットできる directive で、ほんとよく使う。</p>

<p>すでに同じ class 属性値が要素にセットされてるときは、重複しないようになっているあたりもいい感じ。</p>

<p>ng-class の使い方は、スペース区切りの class 文字列<code>'active disabled'</code>を保持する変数や、class 属性値文字列の配列<code>['active', 'disabled']</code>を保持する変数を指定する。</p>

<p>けれど一番良く使うのは、class 属性値と boolean 値をマッピングした object で、これを ng-class に指定する使い方について紹介。</p>

<!-- more -->


<h2>ng-class の利用例</h2>

<figure class='code'><figcaption><span>link</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">scope</span><span class="p">.</span><span class="nx">isActive</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">matchIdx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">scope</span><span class="p">.</span><span class="nx">active</span> <span class="o">==</span> <span class="nx">matchIdx</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">scope</span><span class="p">.</span><span class="nx">selectActive</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">matchIdx</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">scope</span><span class="p">.</span><span class="nx">active</span> <span class="o">=</span> <span class="nx">matchIdx</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>template</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&quot;match in matches&quot;</span> <span class="na">ng-class=</span><span class="s">&quot;{active: isActive($index)}&quot;</span> <span class="na">ng-mouseenter=</span><span class="s">&quot;selectActive($index)&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>UI Bootstrap の <a href="http://angular-ui.github.io/bootstrap/#/typeahead">Typeahead</a> から抜き出したコードで、マウスホバーされた行のインデックスを active で保持し、ng-class では<code>isActive</code>で boolean を返す isActive を指定していて、ホバー行では<code>class="ng-scope active"</code>となり、その他の行では<code>class="ng-scope"</code>となるような指定になっている。</p>

<p>ちなみに、<code>$index</code>は ng-repeat で利用できるインデックス（0..length-1）で、<code>ng-scope</code>は scope ができる要素に AngularJS が自動的に付けてる class。</p>

<h2>ng-class を controller で実装してみる</h2>

<p>たくさんの class 属性値を制御したい場合、ng-class の指定がすごく長くなって微妙な気分になってくるので、そんなときは controller のほうに移すのもいいかもしれない（CSS の class が JavaScript 側に行ってしまうのもまた微妙だけれど）。</p>

<p>ソート列のアイコンを変える UI を実現するサンプルコードはこんな感じに。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;//code.angularjs.org/1.2.0/angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;Ninja&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;SortCtrl&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">sortField</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">ascending</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">sort</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fieldName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">sortField</span> <span class="o">==</span> <span class="nx">fieldName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">ascending</span> <span class="o">=</span> <span class="o">!</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">ascending</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">sortField</span> <span class="o">=</span> <span class="nx">fieldName</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">ascending</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">isSortedBy</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fieldName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">sortField</span> <span class="o">===</span> <span class="nx">fieldName</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">isSortedAscending</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fieldName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">isSortedBy</span><span class="p">(</span><span class="nx">fieldName</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">ascending</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">isSortedDescending</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fieldName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">isSortedBy</span><span class="p">(</span><span class="nx">fieldName</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">ascending</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">iconSort</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fieldName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;icon-sort&#39;</span><span class="o">:</span> <span class="o">!</span><span class="nx">isSortedBy</span><span class="p">(</span><span class="nx">fieldName</span><span class="p">),</span>
</span><span class='line'>      <span class="s1">&#39;icon-sort-up&#39;</span><span class="o">:</span> <span class="nx">isSortedAscending</span><span class="p">(</span><span class="nx">fieldName</span><span class="p">),</span>
</span><span class='line'>      <span class="s1">&#39;icon-sort-down&#39;</span><span class="o">:</span> <span class="nx">isSortedDescending</span><span class="p">(</span><span class="nx">fieldName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;table</span> <span class="na">ng-app=</span><span class="s">&quot;Ninja&quot;</span> <span class="na">class=</span><span class="s">&quot;demo&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;thead</span> <span class="na">ng-controller=</span><span class="s">&quot;SortCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th</span> <span class="na">ng-click=</span><span class="s">&quot;sort(&#39;name&#39;)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        Name <span class="nt">&lt;i</span> <span class="na">ng-class=</span><span class="s">&quot;iconSort(&#39;name&#39;)&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th</span> <span class="na">ng-click=</span><span class="s">&quot;sort(&#39;modified&#39;)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        Date Modified <span class="nt">&lt;i</span> <span class="na">ng-class=</span><span class="s">&quot;iconSort(&#39;modified&#39;)&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th</span> <span class="na">ng-click=</span><span class="s">&quot;sort(&#39;size&#39;)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        Size <span class="nt">&lt;i</span> <span class="na">ng-class=</span><span class="s">&quot;iconSort(&#39;size&#39;)&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;th</span> <span class="na">ng-click=</span><span class="s">&quot;sort(&#39;kind&#39;)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        Kind <span class="nt">&lt;i</span> <span class="na">ng-class=</span><span class="s">&quot;iconSort(&#39;kind&#39;)&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/th&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><link href="http://angularjsninja.com//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css" rel="stylesheet"></p>

<script src="http://angularjsninja.com//code.angularjs.org/1.2.0/angular.min.js"></script>


<script>
angular.module('Ninja', [])
.controller('SortCtrl', function($scope) {
  $scope.sortField = undefined;
  $scope.ascending = true;
  $scope.sort = function(fieldName) {
    if ($scope.sortField == fieldName) {
      $scope.ascending = !$scope.ascending;
    } else {
      $scope.sortField = fieldName;
      $scope.ascending = true;
    }
  };
  var isSortedBy = function(fieldName) {
    return $scope.sortField === fieldName;
  };
  var isSortedAscending = function(fieldName) {
    return isSortedBy(fieldName) && $scope.ascending;
  };
  var isSortedDescending = function(fieldName) {
    return isSortedBy(fieldName) && !$scope.ascending;
  };
  $scope.iconSort = function(fieldName) {
    return {
      'icon-sort': !isSortedBy(fieldName),
      'icon-sort-up': isSortedAscending(fieldName),
      'icon-sort-down': isSortedDescending(fieldName)
    };
  };
});
</script>


<table ng-app="Ninja" class="demo">
  <thead ng-controller="SortCtrl">
    <tr>
      <th ng-click="sort('name')">
        Name <i ng-class="iconSort('name')"></i>
      </th>
      <th ng-click="sort('modified')">
        Date Modified <i ng-class="iconSort('modified')"></i>
      </th>
      <th ng-click="sort('size')">
        Size <i ng-class="iconSort('size')"></i>
      </th>
      <th ng-click="sort('kind')">
        Kind <i ng-class="iconSort('kind')"></i>
      </th>
    </tr>
  </thead>
</table>


<p>見どころは 25 行目の<code>$scope.iconSort</code>function で return している object で、この<code>iconSort</code>を ng-class で使ってソートのアイコン表示を切り替えている。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS 1.2.0 リリース！]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/09/angularjs-1.2.0-timely-delivery/"/>
    <updated>2013-11-09T10:14:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/09/angularjs-1.2.0-timely-delivery</id>
    <content type="html"><![CDATA[<hr />

<p>待望の AngularJS 1.2.0 リリースがキター！！</p>

<p>まだ把握してない内容もあるんだけど、取り急ぎ公式ブログの<a href="http://blog.angularjs.org/2013/11/angularjs-120-timely-delivery.html">内容</a>を（一部省略して）日本語に訳しときます。</p>

<hr />

<h2>AngularJS 1.2.0: timely-delivery</h2>

<p>1.2.0-rc3 で見つかった多くの問題を修正し、前回の安定版リリースからいくつもの新しい機能を導入している。</p>

<p>前回の安定版リリースからの注目すべき変更点：</p>

<ul>
<li><a href="http://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html">アニメーションとトランジション</a></li>
<li><a href="http://kensheedlo.com/2013/08/15/error-message-minification-with-minerr.html">エラーメッセージ</a>（error minification を含む）</li>
<li><a href="http://docs.angularjs.org/api/ng.$sce">厳密なコンテキストのエスケーピング</a></li>
<li><a href="http://docs.angularjs.org/api/ng.directive:ngRepeat">ng-repeat で重複を防ぐトラッキング機能</a></li>
<li><a href="http://egghead.io/lessons/angularjs-experimental-controller-as-syntax">テンプレート内で controller インスタンスにアクセスするための構文</a></li>
<li><a href="https://github.com/angular/angular.js/pull/3699">Promise A+ に準拠</a></li>
<li><a href="http://docs.angularjs.org/api/ngRoute">ngRoute を独自モジュールに分離</a></li>
</ul>


<p>リリースの詳細は、<a href="https://github.com/angular/angular.js/blob/master/CHANGELOG.md">changelog</a> を参照。</p>

<p>移行ガイドは <a href="http://docs.angularjs.org/guide/migration">our guides</a> を参照。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSでカスタムfilterを書いてみよう]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/09/angularjs-filter/"/>
    <updated>2013-11-09T00:01:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/09/angularjs-filter</id>
    <content type="html"><![CDATA[<hr />

<h2>filter とは</h2>

<p>filter は、表示用に値を加工してくれる機能。HTML テンプレートだけでなく、controller や service でも利用できる。また、独自の filter を簡単に定義することもできる。</p>

<p>構文から利用例、そしてカスタム filter のサンプルコードを紹介！</p>

<!-- more -->


<h2>filter の構文</h2>

<p>こんなふうに、パイプ記号を使う構文で記述。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{{ expression | filter }}</span></code></pre></td></tr></table></div></figure>


<p>チェーン（chaining）することもできるし、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{{ expression | filter1 | filter2 }}</span></code></pre></td></tr></table></div></figure>


<p>引数を取ることもできる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{{ expression | filter:arg1:arg2 }}</span></code></pre></td></tr></table></div></figure>


<h2>filter の利用例</h2>

<p>たとえば数値をカンマ区切りで表示したければ、AngularJS 標準の <a href="http://docs.angularjs.org/api/ng.filter:number">number</a> filter を使うだけでラクチン。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{{ 123456789 | number }}</span></code></pre></td></tr></table></div></figure>


<p>123,456,789</p>

<p>標準の filter については、AngularJS <a href="http://docs.angularjs.org/api/ng#filter">公式サイト</a>のほうで。<a href="http://docs.angularjs.org/api/ng.filter:filter">filter</a> filter はかなり使えるので要チェック！</p>

<h2>カスタム filter を実装してみる</h2>

<p>例として、全角英数字が混じってて見苦しいデータがあったとして、せめて表示の段階ででもスッキリと半角英数字に揃えて表示したいなーということを実現する filter のサンプルコードを。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://code.angularjs.org/1.2.0-rc.3/angular.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;Ninja&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;oneByte&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">input</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[Ａ-Ｚａ-ｚ０-９]/g</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0xFEE0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">app</span><span class="o">=</span><span class="s2">&quot;Ninja&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{{</span> <span class="nx">val</span> <span class="o">|</span> <span class="nx">oneByte</span> <span class="p">}}</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s2">&quot;val&quot;</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">init</span><span class="o">=</span><span class="s2">&quot;val=&#39;Ａｎｇｕｌａｒｊｓ Ninja&#39;&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<script src="http://code.angularjs.org/1.2.0-rc.3/angular.min.js"></script>


<script>
angular.module('Ninja', [])
.filter('oneByte', function() {
  return function(input) {
    return input.replace(/[Ａ-Ｚａ-ｚ０-９]/g, function(s) {
      return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
    });
  };
});
</script>


<div ng-app="Ninja">
  {{ val | oneByte }}<br>
  <input type="text" ng-model="val" ng-init="val='Ａｎｇｕｌａｒｊｓ Ninja'">
</div>


<p>いやー、filter 楽しい。でも filter はパフォーマンス的にアレなので、使いすぎにご注意を。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSのng-listが便利なようで便利でなく、でもやっぱり便利]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/08/angularjs-nglist/"/>
    <updated>2013-11-08T01:16:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/08/angularjs-nglist</id>
    <content type="html"><![CDATA[<hr />

<h2>ngList とは</h2>

<p><a href="http://docs.angularjs.org/api/ng.directive:ngList">ngList</a> は、テキストボックスに入力された区切り文字列と、文字列配列のモデルとを相互に変換してくれる directive です。</p>

<p>区切り文字（delimiter）のデフォルトはカンマですが、別の文字列や、正規表現も使えます。</p>

<p>うん、なんだか便利な感じ！</p>

<!-- more -->


<h2>さっそく使ってみたけど、便利じゃない…</h2>

<ul>
<li>配列に文字列を追加・削除してもテキストボックスの表示変わらんやん…</li>
<li>正規表現はおろか、何を指定してもカンマとして動いてくれちゃうやん…</li>
</ul>


<p>なんだろう、あきらかに不具合だよ、これは。</p>

<p>てことで、いつものように Stack Overflow に頼る。</p>

<p><a href="http://stackoverflow.com/questions/15590140/ng-list-input-not-updating-when-adding-items-to-array">javascript &ndash; ng-list input not updating when adding items to array &ndash; Stack Overflow</a></p>

<blockquote><p>Formatters are only invoked if the value is strictly not equal to the previous value, but since it is the same array instance in your first example, that statement evaluates to false, and hence the text field isn&#8217;t updated.</p></blockquote>


<p>配列の中身が変わっても知らんしって実装になってるから更新されへんねんでってことね。</p>

<h2>でもやっぱり便利だから使えるようにしたい</h2>

<p>AngularJS 本体のコードを修正して Pull Req&hellip;。いやいや、敷居が高い。</p>

<p>とりあえずの対応としては、配列に文字列を追加・削除するたびに配列を新しくしちゃえば動く。</p>

<h2>デモとサンプルコード</h2>

<hr />

<div ng-app>
  <script src="http://codeorigin.jquery.com/jquery-2.0.3.min.js"></script>
  <script src="http://code.angularjs.org/1.2.0-rc.3/angular.min.js"></script>  
  <script>
    function TagCtrl($scope) {
      $scope.tags = [];
      $scope.select = function(tag) {
        if ($scope.contains(tag, $scope.tags)) {
          var tags = [];
          angular.forEach($scope.tags, function(t) {
            if (tag != t) {
              tags.push(t);
            }
          });
          $scope.tags = tags;
        } else {
          $scope.tags = angular.copy($scope.tags);
          $scope.tags.push(tag);
        }
      };
      $scope.contains = function(value, array) {
        return 0 <= $.inArray(value, array);
      };
    }
  </script>
  <div ng-controller="TagCtrl">
    <input type="text" ng-model="tags" ng-list><br>
    <a href="" ng-click="select('Red')">Red</a>    
    <a href="" ng-click="select('Orange')">Orange</a>
    <a href="" ng-click="select('Yellow')">Yellow</a>
    <a href="" ng-click="select('Green')">Green</a>
    <a href="" ng-click="select('Blue')">Blue</a>
    <a href="" ng-click="select('Purple')">Purple</a>
    <a href="" ng-click="select('Gray')">Gray</a>
  </div>
</div>


<hr />

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">ng-app</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://codeorigin.jquery.com/jquery-2.0.3.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://code.angularjs.org/1.2.0-rc.3/angular.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script&gt;</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">TagCtrl</span><span class="p">(</span><span class="nx">$scope</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">tags</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">select</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">contains</span><span class="p">(</span><span class="nx">tag</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">.</span><span class="nx">tags</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">tags</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>          <span class="nx">angular</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">tags</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">tag</span> <span class="o">!=</span> <span class="nx">t</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">tags</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">tags</span> <span class="o">=</span> <span class="nx">tags</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">tags</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">tags</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">$scope</span><span class="p">.</span><span class="nx">tags</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">tag</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>      <span class="nx">$scope</span><span class="p">.</span><span class="nx">contains</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">array</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">array</span><span class="p">);</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">ng-controller=</span><span class="s">&quot;TagCtrl&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;tags&quot;</span> <span class="na">ng-list</span><span class="nt">&gt;&lt;br&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;select(&#39;Red&#39;)&quot;</span><span class="nt">&gt;</span>Red<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;select(&#39;Orange&#39;)&quot;</span><span class="nt">&gt;</span>Orange<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;select(&#39;Yellow&#39;)&quot;</span><span class="nt">&gt;</span>Yellow<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;select(&#39;Green&#39;)&quot;</span><span class="nt">&gt;</span>Green<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;select(&#39;Blue&#39;)&quot;</span><span class="nt">&gt;</span>Blue<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;select(&#39;Purple&#39;)&quot;</span><span class="nt">&gt;</span>Purple<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;&quot;</span> <span class="na">ng-click=</span><span class="s">&quot;select(&#39;Gray&#39;)&quot;</span><span class="nt">&gt;</span>Gray<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>区切り文字の変更は？</h2>

<p>まあ、とりあえずカンマ区切りでヨシということで。ここの <a href="https://github.com/angular/angular.js/blob/v1.2.0-rc.3/src/ng/directive/input.js#L1381">value.join(&lsquo;, &rsquo;)</a> がおかしいんだろうと思いつつも、必要になるまで置いとこう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS 1.2.0-rc3 以降の Promise]]></title>
    <link href="http://angularjsninja.com/blog/2013/10/26/angularjs-1.2.0-rc3-promises/"/>
    <updated>2013-10-26T14:15:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/10/26/angularjs-1.2.0-rc3-promises</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS 1.2.0-rc3 以降、Promise の扱いに注意</h2>

<p>rc2 までと異なり、promise の自動アンラップ（auto unwrapping）がデフォルトで無効となり、promise を直接 $scope の変数に突っ込んでたりするとうまく動かなくなる。</p>

<p>rc2 までは、promise がリターンされるとき、こんなふうに書けた。</p>

<figure class='code'><figcaption><span>controllers.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">values</span> <span class="o">=</span> <span class="nx">NinjaService</span><span class="p">.</span><span class="nx">getValues</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>rc3 からは、こう書かないと動かない。</p>

<figure class='code'><figcaption><span>controllers.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">NinjaService</span><span class="p">.</span><span class="nx">getValues</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">values</span> <span class="o">=</span> <span class="nx">values</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>自動アンラップを採用しなくした理由は、この Issue でのやり取りに詳しく書かれている。</p>

<p><a href="https://github.com/angular/angular.js/issues/4158">Automatic unwrapping of promises by $parse severely limits its usefulness · Issue #4158 · angular/angular.js</a></p>

<p>この変更によって、前回のエントリーで書いた Angular UI の Typeahead も動作するようになったということ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS 1.2.0-rc2 で Typeahead が動かない]]></title>
    <link href="http://angularjsninja.com/blog/2013/10/19/angularjs-1.2.0-rc2-typeahead/"/>
    <updated>2013-10-19T17:42:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/10/19/angularjs-1.2.0-rc2-typeahead</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS で UI Bootstrap の Typeahead が動かない</h2>

<p>AngularJS 1.2.0 の rc2 にした途端、UI Bootstrap (0.6.0) の Typeahead (Autocomplete みたいなやつ) が動かなくなった。</p>

<p>仕様変更なのかバグなのかわからず、とりあえず<code>ui-bootstrap-tpls-0.6.0.js</code>のコードを見たりしながらも AngularJS か UI Bootstrap のほうでバグ修正してくんないかなーと期待＆様子見していたところ、AngularJS 1.2.0 の rc3 では正常に動作するようになったので一件落着。</p>

<p>ちなみに、rc2 でのエラーは、<code>matches is undefined</code>というもの。</p>

<p>Stack Overflow で関連する記事は、<a href="http://stackoverflow.com/questions/18764023/angularjs-1-2-0-bootstrap-ui-0-6-0-bootstrap3-bis2-typeahead/19377002#19377002">AngularJS 1.2.0 Bootstrap UI 0.6.0 (bootstrap3_bis2) Typeahead</a> かな。rc2 では、<code>promise</code>絡みの実装に問題があったみたいだ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery と AngularJS]]></title>
    <link href="http://angularjsninja.com/blog/2013/10/05/jquery-to-angularjs/"/>
    <updated>2013-10-05T20:32:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/10/05/jquery-to-angularjs</id>
    <content type="html"><![CDATA[<hr />

<h2>jQuery と AngularJS は併用できるのか？</h2>

<ul>
<li>jQuery と AngularJS は併用可能</li>
<li>jQuery メインのサイトで AngularJS を部分的に使用可能</li>
</ul>


<!-- more -->


<h2>AngularJS と jQuery は併用可能</h2>

<p>AngularJS より先に jQuery を読み込ませていればその jQuery が利用される。jQuery を読み込ませていなければ AngularJS が内蔵している jqLite（jQuery の API 互換サブセット）の実装が利用される。</p>

<p>jqLite が実装している jQuery 互換の DOM 操作関連の API は、<a href="http://docs.angularjs.org/api/angular.element">AngularJS: element</a> で確認できるが、DOM 操作系の主要なメソッドは実装されている。</p>

<p>AngularJS 1.2 では、<code>bind()</code>/<code>unbind()</code>でなく<code>on()</code>/<code>off()</code>が利用されるため、jQuery のバージョンは 1.7.1 以降とする必要がある。</p>

<p>AngularJS で jQuery の DOM 操作を実装する場合、controller では要素の追加・削除や表示・非表示などの DOM 操作を実装せずに、AngularJS にビルトイン（標準）の directive を利用するか、自作の directive で DOM 操作を実装しよう。</p>

<p><code>ng-repeat</code>、<code>ng-show</code>、<code>ng-class</code>など、jQuery で実装していた処理を代替できる directive が多数存在するので、積極的に利用してコード量を減らそう。</p>

<h2>jQuery メインのサイトで AngularJS を部分的に使用可能</h2>

<p>jQuery メインに実装してきたサイトで AngularJS を部分的に使うということも可能で、そういう場合には AngularJS の適用範囲（scope）を決めるルート的な directive の<code>ng-app</code>を<code>html</code>や<code>body</code>要素ではなく、必要最小限の範囲を囲う要素に対して記述する。</p>

<p>jQuery で大半を実装しているようなサイトやアプリケーションで、全面的に AngularJS に書き変える決断がすぐにできない場合には、少しずつ部分的に導入して攻めていこう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS と jQuery]]></title>
    <link href="http://angularjsninja.com/blog/2013/10/05/angularjs-to-jquery/"/>
    <updated>2013-10-05T20:32:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/10/05/angularjs-to-jquery</id>
    <content type="html"><![CDATA[<hr />

<p>AngularJS と jQuery は併用できるのか？</p>

<ul>
<li>AngularJS と jQuery は併用可能</li>
<li>jQuery メインのサイトで AngularJS を部分的に使用可能</li>
</ul>


<!-- more -->


<h2>AngularJS と jQuery は併用可能</h2>

<p>AngularJS より先に jQuery を読み込ませていればその jQuery が利用される。jQuery を読み込ませていなければ AngularJS が内蔵している jqLite（jQuery の API 互換サブセット）の実装が利用される。</p>

<p>jqLite が実装している jQuery 互換の DOM 操作関連の API は、<a href="http://docs.angularjs.org/api/angular.element">AngularJS: element</a> で確認できるが、DOM 操作系の主要なメソッドは実装されている。</p>

<p>AngularJS 1.2 では、<code>bind()</code>/<code>unbind()</code>でなく<code>on()</code>/<code>off()</code>が利用されるため、jQuery のバージョンは 1.7.1 以降とする必要がある。</p>

<p>AngularJS で jQuery の DOM 操作を実装する場合、controller では要素の追加・削除や表示・非表示などの DOM 操作を実装せずに、AngularJS にビルトイン（標準）の directive を利用するか、自作の directive で DOM 操作を実装しよう。</p>

<p><code>ng-repeat</code>、<code>ng-show</code>、<code>ng-class</code>など、jQuery で実装していた処理を代替できる directive が多数存在するので、積極的に利用してコード量を減らそう。</p>

<h2>jQuery メインのサイトで AngularJS を部分的に使用可能</h2>

<p>jQuery メインに実装してきたサイトで AngularJS を部分的に使うということも可能で、そういう場合には AngularJS の適用範囲（scope）を決めるルート的な directive の<code>ng-app</code>を<code>html</code>や<code>body</code>要素ではなく、必要最小限の範囲を囲う要素に対して記述する。</p>

<p>jQuery で大半を実装しているようなサイトやアプリケーションで、全面的に AngularJS に書き変える決断がすぐにできない場合には、少しずつ部分的に導入して攻めていこう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Bootstrap のモーダルをドラッグで動かしたいときは]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/25/twitter-bootstrap-modal-draggable/"/>
    <updated>2013-09-25T21:57:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/25/twitter-bootstrap-modal-draggable</id>
    <content type="html"><![CDATA[<hr />

<p>みんな大好き <a href="http://getbootstrap.com/2.3.2/">Twitter Bootstrap</a> の話。CSS フレームワークの枠を超え、フロントエンド開発のキングというか、デファクトですね。</p>

<p>数年前のプロジェクトで <a href="http://www.blueprintcss.org">Blueprint</a> をチョイスした自分がバカみたいに、その後の Bootstrap の大流行。<a href="http://getbootstrap.com">Bootstrap 3</a> も引き続き人気を博するだろうか。</p>

<p>そんな Bootstrap なんだけど、不満があるとすれば、モーダル（<a href="http://getbootstrap.com/2.3.2/javascript.html#modals">Modals</a>）を動かせないこと！ モーダルダイアログがなんでドラッグで動かないんだ！</p>

<!-- more -->


<h2>困ったときはググるでしょ</h2>

<p>てことで、<code>bootstrap modal drag</code>とかでググればアッサリ答えにありつける。いつもながら Stack Overflow はすごいなあ、助かるなあと感謝しながらおもむろにページを開く。</p>

<p><a href="http://stackoverflow.com/questions/12591597/twitter-bootstrap-modal-form-how-to-drag-and-drop">Twitter Bootstrap Modal Form: How to drag and drop? &ndash; Stack Overflow</a></p>

<p>答えとしては、<a href="http://jqueryui.com/">jQuery UI</a> の <a href="http://jqueryui.com/draggable/">Draggable</a> を使えということ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#myModal&quot;</span><span class="p">).</span><span class="nx">draggable</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">handle</span><span class="o">:</span> <span class="s2">&quot;.modal-header&quot;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>そんだけー。</p>

<p>じゃなかった…。そう言えば、このままだとセレクタ<code>.modal.fade</code>と<code>.modal.fade.in</code>に定義されている<code>top</code>と<code>transition</code>のプロパティ（モーダルが上から滑り降りてくるトランジション）による影響で、縦方向のドラッグがの〜んびりした動きになって違和感が残る。</p>

<p>なので、上から滑り降りてくるトランジションはあきらめて、class 属性から<code>fade</code>を消してしまうのがいいと思う。</p>

<p>jQuery UI については、すべての機能はいらないだろうから、Draggable だけとか、必要な機能だけ選択してダウンロードしましょう。</p>

<h2>UI Bootstrap と AngularStrap</h2>

<p>ちょっと脱線して、AngularJS のことも。</p>

<p>AngularJS と Bootstrap を併用するときは <a href="http://angular-ui.github.io/bootstrap/">UI Bootstrap</a> か、<a href="http://mgcrea.github.io/angular-strap/">AngularStrap</a> を使うと、Bootstrap のコンポーネントが AngularJS の directive として定義されているのでとてもラク。自分で記述するコードがすごく少なくなって快適。</p>

<p>ただ、この UI Bootstrap と AngularStrap は、それぞれいいとこも微妙なとこもあるので両方を使いたいと欲張っちゃうこともある。すると今回のメインである Modal でエラーが…。</p>

<p>Modal に限れば UI Bootstrap のほうが優れてるので、AngularStrap の $modal directive コードを削除しちゃいましょう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS の localStorage モジュール angularLocalStorage]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/13/angular-localstorage/"/>
    <updated>2013-09-13T23:38:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/13/angular-localstorage</id>
    <content type="html"><![CDATA[<hr />

<p>AngularJS アプリケーションで localStorage を使うときに便利なモジュールの紹介。</p>

<p><a href="https://github.com/agrublev/angularLocalStorage">agrublev/angularLocalStorage</a></p>

<!-- more -->


<h2>機能</h2>

<ul>
<li>AngularJS の model と localStorage を双方向にバインド</li>
<li>オブジェクト、配列も変換不要</li>
<li>localStorage 非対応のブラウザでは $cookies にフォールバック（angular-cookies.min.js を参照し、<code>ngCookies</code>を依存モジュールとして記述）</li>
</ul>


<h2>使い方</h2>

<p>依存モジュールとして<code>localStorage</code>を追加。</p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">yourApp</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;yourApp&#39;</span><span class="p">,</span> <span class="p">[...,</span> <span class="s1">&#39;angularLocalStorage&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>controller に<code>storage</code>を記述。</p>

<figure class='code'><figcaption><span>controllers.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">yourApp</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;yourController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="nx">storage</span><span class="p">)</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>storage</code>を使う。デフォルト値やキーを変更可能。</p>

<figure class='code'><figcaption><span>controllers.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// storage.variable にバインド</span>
</span><span class='line'><span class="nx">storage</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span><span class="s1">&#39;varName&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// * defaultValue: デフォルト値</span>
</span><span class='line'><span class="c1">// * storeName: 変数名と異なる localStorage への保存 key を指定</span>
</span><span class='line'><span class="nx">storage</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">$scope</span><span class="p">,</span> <span class="s1">&#39;varName&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">defaultValue</span><span class="o">:</span> <span class="s1">&#39;randomValue123&#39;</span><span class="p">,</span> <span class="nx">storeName</span><span class="o">:</span> <span class="s1">&#39;customStoreKey&#39;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>これだけ。とにかく便利。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS カンファレンス『ng-conf』が年始に開催]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/12/ng-conf-2014/"/>
    <updated>2013-09-12T23:31:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/12/ng-conf-2014</id>
    <content type="html"><![CDATA[<hr />

<p><img src="http://lh5.googleusercontent.com/proxy/wsYUaddAvIcNhXYf0kt63gkDYp_VzQ2-JwB-jUlPzAazYg53ibQF8JdCn2SNwI9ZucozuoJDrhvT54sOHfX44Jiq_v0FvlzDIsQc-4s-q-mnJdx_y6nDHx-VmA=w120-h120" alt="ng-conf" /></p>

<p>AngularJS だけの初めてのカンファレンスが、2014 年 1 月 16 日、17 日に開催される。開催地はユタ州ソルトレイクシティ。</p>

<!-- more -->


<h4>公式ページ</h4>

<p><a href="http://www.ng-conf.org/">ng-conf 2014 &ndash; The World&rsquo;s First Angular Conference in Salt Lake City, Utah</a></p>

<h4>Eventbrite</h4>

<p><a href="http://ng-conf-slc-2014.eventbrite.com">ng-conf 2014 Tickets, Salt Lake City &ndash; Eventbrite</a></p>

<h4>Google+</h4>

<p><a href="https://plus.google.com/101125427377197999853/posts">ng-conf &ndash; Google+</a></p>

<p>Eventbrite の情報では、開催前日の 1 月 15 日に Jon Lindquist さんにより、6 時間のトレーニングを受けられるみたい。Jon Lindquist さんは、AngularJS の学習動画で有名な <a href="http://egghead.io">Egghead.io</a> の人。</p>

<p>2 日間で $600.00 + $27.95、トレーニングを含む 3 日間で $1,000.00 + $39.95。いつもながら、アメリカのカンファレンスってほんと高い。まあ、AngularJS のおかげで稼がせてもらってるようなもんですから、こういうときにお返ししましょうね。</p>

<p>Google+ での情報によると、$600 ドルは Early Bird Ticket Sales、つまり早割で安くなっていて、正規の金額は 2 日間で $800 の様子。</p>

<p>さあ、みんなで行こうじゃありませんかー！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS を古い IE に対応させるには]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/11/angularjs-ie-compatibility/"/>
    <updated>2013-09-11T23:58:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/11/angularjs-ie-compatibility</id>
    <content type="html"><![CDATA[<hr />

<p>AngularJS を IE 8 以前の Internet Explorer に対応させるには、<a href="http://docs.angularjs.org/guide/ie">AngularJS: Internet Explorer Compatibility</a> のページに記載されている手順を実施する必要がある。</p>

<!-- more -->


<p>まず json2.js または json3.js。</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">xmlns:ng=</span><span class="s">&quot;http://angularjs.org&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--[if lte IE 8]&gt;</span>
</span><span class='line'><span class="c">      &lt;script src=&quot;/path/to/json2.js&quot;&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">    &lt;![endif]--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に &ldquo;ng-app&rdquo; という値の id 属性を、ng-app 属性を記述する要素に追加。</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">xmlns:ng=</span><span class="s">&quot;http://angularjs.org&quot;</span> <span class="na">id=</span><span class="s">&quot;ng-app&quot;</span> <span class="na">ng-app=</span><span class="s">&quot;optionalModuleName&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後に、カスタムタグを使わないようにする。</p>

<p>または、&lt;ng-view> や 独自のカスタムタグ（例えば <alert> や <tabset> など）を使うのであれば、そのためのコード（document.createElement）を追加。</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">xmlns:ng=</span><span class="s">&quot;http://angularjs.org&quot;</span> <span class="na">id=</span><span class="s">&quot;ng-app&quot;</span> <span class="na">ng-app=</span><span class="s">&quot;optionalModuleName&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--[if lte IE 8]&gt;</span>
</span><span class='line'><span class="c">      &lt;script&gt;</span>
</span><span class='line'><span class="c">        document.createElement(&#39;ng-include&#39;);</span>
</span><span class='line'><span class="c">        document.createElement(&#39;ng-pluralize&#39;);</span>
</span><span class='line'><span class="c">        document.createElement(&#39;ng-view&#39;);</span>
</span><span class='line'><span class="c"> </span>
</span><span class='line'><span class="c">        // Optionally these for CSS</span>
</span><span class='line'><span class="c">        document.createElement(&#39;ng:include&#39;);</span>
</span><span class='line'><span class="c">        document.createElement(&#39;ng:pluralize&#39;);</span>
</span><span class='line'><span class="c">        document.createElement(&#39;ng:view&#39;);</span>
</span><span class='line'><span class="c">      &lt;/script&gt;</span>
</span><span class='line'><span class="c">    &lt;![endif]--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>それだけで済まない場合も</h2>

<p>最後に、さっきのページでは扱われていないものの、$http の delete メソッドを使っているとエラーが発生して動かないので、delete メソッドを以下のように変更。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$http</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="err">…</span><span class="p">)</span> <span class="c1">// エラー</span>
</span><span class='line'><span class="nx">$http</span><span class="p">[</span><span class="s1">&#39;delete&#39;</span><span class="p">](</span><span class="err">…</span><span class="p">)</span> <span class="c1">// これで OK</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS のステッカーをゲットするには]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/10/angularjs-stickers/"/>
    <updated>2013-09-10T14:14:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/10/angularjs-stickers</id>
    <content type="html"><![CDATA[<hr />

<p><img src="http://ih0.redbubble.net/image.13710650.1031/sticker,375x360.u8.png" alt="AngularJS ×2 by csyz ★ $1.49 stickers" /></p>

<p>AngularJS が好きで好きでしょうがない？</p>

<p>ステッカーを MacBook Air に貼って、AngularJS Ninja っぷりをアピールしたい？</p>

<p>よくイベントとかで配ってたりするけど、AngularJS のイベントなんてやってない？</p>

<p>そんなときは買っちゃおう！</p>

<!-- more -->


<h2>Redbubble</h2>

<p><a href="http://www.redbubble.com/people/csyz/portfolio">csyz ★ $1.49 stickers: Art, Design &amp; Photography | Redbubble</a></p>

<p>ステッカーだけでなくＴシャツもあるし、AngularJS だけでなく Node.js や Backbone.js など他にもいろいろある！</p>

<p>ちなみに私の MacBook Air には、白いリンゴマークしか付けてませんけどね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hex Color Tool で明度だけを変えたヘックスコードを取得する]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/09/hexcolortool/"/>
    <updated>2013-09-09T23:34:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/09/hexcolortool</id>
    <content type="html"><![CDATA[<hr />

<p><img src="http://hexcolortool.com/images/logo.svg" alt="Hex Color Tool" /></p>

<p>ベースカラーを少し明るくした色や、少し暗くした色が欲しくても、ヘックスコードがわかんないってときには、<a href="http://hexcolortool.com/">Hex Color Tool</a> を使おう。ベースカラーを 5% 刻みで明るく、または暗くした値を表示させることができる。</p>

<!-- more -->


<p>白色の #ffffff を 5% ずつ暗くすると、#f2f2f2, #e6e6e6, #d9d9d9, #cccccc となり、<a href="http://getbootstrap.com/">Twitter Bootstrap</a> の CSS でも頻繁に指定されている薄いグレー色の値となる。</p>

<p>このツールを使って得たヘックスコードをグラデーションなどに利用して、統一感の取れたカラーデザインのページを実現しよう。</p>

<p>え？ LESS や Sass を使えばいいって？ 実はあんまり好きじゃないんですよね…。</p>

<p>てことで、今回は AngularJS と直接関係ない内容。UI デザインに関したこともちょくちょく書いてくということで。</p>
]]></content>
  </entry>
  
</feed>
