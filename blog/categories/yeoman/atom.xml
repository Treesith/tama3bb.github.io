<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Yeoman | AngularJS Ninja]]></title>
  <link href="http://angularjsninja.com/blog/categories/yeoman/atom.xml" rel="self"/>
  <link href="http://angularjsninja.com/"/>
  <updated>2013-08-30T20:06:07+09:00</updated>
  <id>http://angularjsninja.com/</id>
  <author>
    <name><![CDATA[Akihito Tamagawa]]></name>
    <email><![CDATA[tama3bb@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS のプロジェクト構成をどうするか]]></title>
    <link href="http://angularjsninja.com/blog/2013/08/30/angularjs-project-structure/"/>
    <updated>2013-08-30T20:05:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/08/30/angularjs-project-structure</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS のプロジェクト構成ってどうするのがいいんだ？</h2>

<p>AngularJS でアプリケーションを作るときに悩むのがプロジェクト構成。なんでもかんでも一つの JavaScript ファイルで実装してしまうことも可能だけれど、コード量が増えてくるとすぐにつらくなる。</p>

<p>そこでどうしようかなと考えるときに参照するであろう一つが <a href="https://github.com/angular?tab=members">AngularJS チーム</a> による AngularJS Web アプリケーションのスケルトンプロジェクト <a href="https://github.com/angular/angular-seed">angular-seed</a>。</p>

<!-- more -->


<hr />

<h2>Angular Seed</h2>

<p>この angular-seed のプロジェクト構成はこんな感じ。</p>

<p><code>
app
├─ css
│  └─ app.css
├─ img
├─ js
│  ├─ app.js
│  ├─ controllers.js
│  ├─ directives.js
│  ├─ filters.js
│  └─ services.js
├─ lib
│  └─ angular
│     └─ angular.js
├─ partials
│  ├─ partial1.html
│  └─ partial2.html
├─ index-async.html
└─ index.html
</code></p>

<p>簡単に言うと、AngularJS の機能である controller、directive、filter、service と機能別にファイルを分けるということ。</p>

<p>前回の<a href="/blog/2013/08/28/how-to-declare-models/">モデル定義の記事</a>、前々回の<a href="/blog/2013/08/29/angularjs-web-api-call/">サービス定義の記事</a>で利用した factory は service の仲間なので services.js に書くことになる。</p>

<p><code>html index.html
  &lt;!-- In production use:
  &lt;script src="http://angularjsninja.com//ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js"&gt;&lt;/script&gt;
  --&gt;
  &lt;script src="lib/angular/angular.js"&gt;&lt;/script&gt;
  &lt;script src="js/app.js"&gt;&lt;/script&gt;
  &lt;script src="js/services.js"&gt;&lt;/script&gt;
  &lt;script src="js/controllers.js"&gt;&lt;/script&gt;
  &lt;script src="js/filters.js"&gt;&lt;/script&gt;
  &lt;script src="js/directives.js"&gt;&lt;/script&gt;
&lt;/body&gt;
</code></p>

<p>まあ、これでもいいんだけれど、大規模になってくるともっとファイルを分けたくなってくる。</p>

<p>特に partials の下にある HTML テンプレートは分割しているのに、それに対応するコントローラはすべて controllers.js に記述していくことに抵抗感が出てくる。</p>

<p>また、services.js にモデルを記述するのではなく、モデルごとにファイルを分けてモデルの名前をファイル名に付けたくなる。</p>

<p>そこで、あるべき姿、ベストプラクティスはどんな構成なんだとネットをさまよう。</p>

<hr />

<h2>Building Huuuuuge Apps with AngularJS</h2>

<p>大規模な AngularJS についての記事では <a href="http://briantford.com/blog/huuuuuge-angular-apps.html">Building Huuuuuge Apps with AngularJS</a> が参考になる。この記事は <a href="https://twitter.com/briantford">Brian Ford</a> さんによるもの。</p>

<p>ここで推奨されている構成はこんな感じ。</p>

<p><code>
root-app-folder
├─ index.html
├─ scripts
│  ├─ controllers
│  │  └─ main.js
│  │  └─ ...
│  ├─ directives
│  │  └─ myDirective.js
│  │  └─ ...
│  ├─ filters
│  │  └─ myFilter.js
│  │  └─ ...
│  ├─ services
│  │  └─ myService.js
│  │  └─ ...
│  ├─ vendor
│  │  ├─ angular.js
│  │  ├─ angular.min.js
│  │  ├─ es5-shim.min.js
│  │  └─ json3.min.js
│  └─ app.js
├─ styles
│  └─ ...
└─ views
   ├─ main.html
   └─ ...
</code></p>

<p>で、さらにやるなら、controllers や services にサブディレクトリを、例えば、services/models みたいに作ると。</p>

<p>angular-seed と大きく異なるのは各機能をフォルダにしているところで、controller や service の一つひとつを別のファイルにしやすい。</p>

<p>なぜ lib &ndash;> vendor、css &ndash;> styles、js &ndash;> scripts、partials &ndash;> views に変更しているのかは不明。流儀があるのかな。</p>

<hr />

<h2>Yeoman</h2>

<p>また、この Brian Ford さんが関わっている <a href="http://yeoman.io">Yeoman</a> という Web アプリケーションのワークフローを改善するためのツール群があって、<a href="https://github.com/yeoman/generator-angular">yeoman/generator-angular</a> という AngularJS 用の Yeoman ジェネレータがある。</p>

<p>Yeoman がベストプラクティスと考えるプロジェクト構成で出力されるので、これを利用し、まず従ってみてから、自分の頭で考えるというのもいいと思う。</p>

<p>この Yeoman を利用したプロジェクト構成のことや、Yeoman のページに出てくる Grunt、Bower などのツール類の話はまたあらためて。</p>
]]></content>
  </entry>
  
</feed>
