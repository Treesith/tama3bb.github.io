<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: directive | AngularJS Ninja]]></title>
  <link href="http://angularjsninja.com/blog/categories/directive/atom.xml" rel="self"/>
  <link href="http://angularjsninja.com/"/>
  <updated>2013-11-20T12:19:44+09:00</updated>
  <id>http://angularjsninja.com/</id>
  <author>
    <name><![CDATA[Akihito Tamagawa]]></name>
    <email><![CDATA[tama3bb@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS Directive なんてこわくない（その１）]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/20/angularjs-custom-directives/"/>
    <updated>2013-11-20T12:08:23+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/20/angularjs-custom-directives</id>
    <content type="html"><![CDATA[<hr />

<p>独自（カスタム）directive の話は複雑でボリュームがあるので、何回かに分けることにして、まずは<a href="http://angularjsninja.com/blog/2013/11/19/angularjs-nginclude/">前回の ng-include</a> の流れを受けて、とりあえず HTML を分割することから始めてみよう。</p>

<h2>単にテンプレート部分を Directive にするには</h2>

<p>繰り返し出てくるコード部分を、テンプレートとして directive で宣言するサンプルコード。</p>

<p>``` html</p>

<div ninja-profile></div>


<p><code>
</code> javascript
angular.module(&lsquo;Ninja&rsquo;, [])
  .directive(&lsquo;ninjaCustomer&rsquo;, function() {</p>

<pre><code>return {
  templateUrl: 'partials/ninja-customer.html'
};
</code></pre>

<p>  });
```
こんだけなので、まあどってことない。これだけなら ng-include のほうがラクでいいやんってことになるかな。でもまあ、とりあえずこんだけしか書かなくても directive として動作するのかってことを見ておく。</p>

<!-- more -->


<h2>要素として使う Directive としたければ</h2>

<p>デフォルトでは属性（<code>restrict: 'A'</code>）として使う directive として作られる。なので、要素として HTML で指定する directive にしたければ、<code>restrict</code> オプションが必要になる。</p>

<p><code>html
&lt;ninja-customer&gt;&lt;/ninja-customer&gt;
</code>
``` javascript
angular.module(&lsquo;Ninja&rsquo;, [])
  .directive(&lsquo;ninjaCustomer&rsquo;, function() {</p>

<pre><code>return {
  restrict: 'E',
  templateUrl: 'partials/ninja-customer.html'
};
</code></pre>

<p>  });
<code>``
</code>restrict<code>オプションを指定する場合の選択肢として、覚えておけばいいのは以下の３種類。</code>A<code>は Attribute（属性）で、</code>E`は Element（要素）。</p>

<p><code>javascript
restrict: 'A' // 属性のみ（デフォルト）
restrict: 'E' // 要素のみ
restrict: 'AE' // 属性または要素
</code></p>

<p>属性と要素、どちらを選択するかについては、まとまったコンポーネントとして directive を位置付けるケースでは要素とし、既存の要素に機能を足すようなケースでは属性とするのがいいぽい。</p>

<p>Directive の定義で return するオブジェクトに、オプションとして記述していく記述スタイルで、<code>restrict</code>や<code>templateUrl</code>の他に、<code>link</code>、<code>replace</code>、<code>transclude</code>、<code>scope</code>、<code>controller</code>など使えるオプションがあるんだけれど、ひとまず後回し。</p>

<h2>どんなときにカスタム Directive を作るか</h2>

<p>Controllers と AngularJS 標準の各種 directive を使えば大抵のことはできてしまうのと、directive の仕様が複雑すぎてわかりにくということで、AngularJS を使っていてもカスタム directive は手付かずだったり、作ってみてもこれでいいのか自信ないなって感じになりがちかなと。</p>

<p>カスタム directive は、例えば jQuery（jqLite）などで直接 DOM を操作したいときや、繰り返し出てくるコードをリファクタリングしてまとめたいときに利用するのがいい。</p>

<p>なお、AngularJS のアプリケーションでも jQuery を利用できることについては、過去エントリ「<a href="http://angularjsninja.com/blog/2013/10/05/jquery-to-angularjs/">jQuery と AngularJS</a>」に記載しているように、jQuery を先読みすればその jQuery が使え、jQuery 無しでも AngularJS が持つ jQuery のサブセット jqLite で DOM 操作のコードが同じように記述できる。</p>

<p>さらに、複数のプロジェクトでの再利用を目指してコンポーネント化するなら <a href="http://angular-ui.github.io/bootstrap/">UI Bootstrap</a> のコードを参考に、複雑な directive の作成に取り組んでいきたいところ。</p>

<h2>Directive とは何か</h2>

<p>AngularJS で一番強力な機能と言え、HTML が持っていない意味合いや振る舞いを加えるように使うことができる。AngularJS 標準の<code>ng-bind</code>や<code>ng-model</code>、<code>ng-view</code>とかはすべて directive であって、controllers や services に記述したアプリケーションロジックを、属性や要素として DOM 要素にバインドできるようになる。</p>

<p>簡単に言うと、データバインドするモデルやイベントハンドリングするロジックを、DOM に紐付けるためのものということ。</p>

<h2>標準 Directive</h2>

<p>AngularJS には標準（ビルトイン）の directives がたくさん存在し、公式サイトの <a href="http://docs.angularjs.org/api/ng#directive">ng (core module) ページ Directive</a> には、<code>ng-include</code>、<code>ng-controller</code>、<code>ng-click</code>などよく使う<code>ng</code>で始まるものだけでなく、普通の HTML のように見える<code>a</code>、<code>form</code>や<code>input</code>なども directive として記載されている。</p>

<p>たとえば<code>a</code>については href 属性値が空のときにはデフォルトの動作が防止されるよう処理されたり、<code>form</code>だと name 属性があれば scope のほうでその名前で参照できるように処理されたりする。</p>

<p>form には HTML で form を入れ子にできるよう<code>ng-form</code>があったり、<code>ng-submit</code>の機能、<code>ng-invalid</code>や<code>ng-dirty</code>などの機能についても触れたくなるけれど、その辺のことはまた別の機会に。</p>

<h2>Directives の記述</h2>

<p>Directives は JavaScript では camelCase で宣言し、HTML では小文字ハイフン区切りの lower-case で参照する。</p>

<p>HTML では４種類の参照方法があるものの、基本的には要素か属性として記述する以下の２種類。</p>

<p>``` html
&lt;my-directive>&lt;/my-directive></p>

<div my-directive></div>


<p>```</p>

<p>HTML の validation ツールを使いたければ<code>data-</code>を付けておくといい。</p>

<p><code>html
&lt;span ng-bind="name"&gt;&lt;/span&gt;
&lt;span data-ng-bind="name"&gt;&lt;/span&gt;
</code></p>

<h2>Directives の接頭辞</h2>

<p>カスタム directive の名前には、念のため接頭辞（ng を避ける）を付けておくほうがいいかもしれない。将来、偶然 HTML 標準として追加される要素名と重なってしまうケースや、AngularUI や AngularStrap などサードパーティ製の directives と重なってしまうケースもありえるので。</p>

<h2>次回へ向けて</h2>

<p>え、そんなちょっとしか記述しなくても directive として成立してるんだ、ってことを見てもらうのが初回の目的なので、ひとまずここで終了。</p>

<p>こんなとこで終わったら、directive こわいままになっちゃうので、なんとしてでも次回も続けないと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSでHTMLを分割するのにお手軽なng-include]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/19/angularjs-nginclude/"/>
    <updated>2013-11-19T09:17:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/19/angularjs-nginclude</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS で HTML を分割するのにお手軽な ng-include</h2>

<p>``` html</p>

<div ng-include="'partials/sidebar.html'"></div>


<p><code>
</code> html
&lt;ng-include src=&ldquo;&lsquo;partials/sidebar.html&rsquo;&rdquo;>&lt;/ng-include>
```</p>

<p>ポイントとしては、属性値に文字列を渡す必要があって、ダブルクオートの内側にシングルクオートを記述すること。</p>

<p>変数を渡して、可変にもできる。</p>

<p><code>javascript
$scope.sidebarUrl = 'partials/sidebar.html';
</code>
``` html</p>

<div ng-include="sidebarUrl"></div>


<p>```</p>

<p><code>ng-include</code>で表示する HTML 部分でも、もちろん普通に AngularJS の管理下にあり、データバインドも効く。分割したフラグメント専用に controller の scope を作るなら、<code>ng-controller</code>も指定できる。</p>

<p>``` html</p>

<div ng-include="'partials/sidebar.html'" ng-controller="SidebarCtrl"></div>


<p>```</p>

<!-- more -->


<h2>分割した HTML は $templateCache でキャッシュしてくれる</h2>

<p>分割した HTML は、通信して取得した時点で AngularJS が $templateCache で（メモリに）保持するため、分割されている部分を表示するたびに取得する通信が発生するわけではない。</p>

<p>かつ、必要となった時点で取得しにいくレイジーローディングなので、ユーザがまったく表示しない部分であれば、１度も取得しにいかないので効率的でもある。</p>

<p>一方で、Grunt などでビルドする時に、この HTML フラグメントを一つのファイルにしてしまい、一括してロードさせることでネットワークでのロスを下げるという方向で工夫もできる。</p>

<p>スクリプトとして HTML テンプレートを記述する場合は、script 要素に<code>type</code>と<code>id</code>を指定する。</p>

<p><code>html
&lt;scipt type="text/ng-template" id="templateId.html"&gt;
  This is the content of the template
&lt;/script&gt;
</code></p>

<p>初期処理でテンプレートを<code>$templateCache</code>に<code>put</code>するようにしておけば、その分だけ操作性の向上も期待できる。</p>

<p><code>javascript
var myApp = angular.module('Ninja', []);
myApp.run(function($templateCache) {
  $templateCache.put('templateId.html', 'This is the content of the template');
});
</code></p>

<p>お手軽に断片化できる ng-include の紹介でしたが、HTML を分割する手段としては他にも ng-view の routing で templateUrl を指定することや、custom directive を作成することもできるので、次回以降でその辺も触れる（たぶん）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSで増殖現象に出会ったらng-ifを疑おう]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/16/angularjs-ngif-proliferation/"/>
    <updated>2013-11-16T02:11:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/16/angularjs-ngif-proliferation</id>
    <content type="html"><![CDATA[<hr />

<h2>増殖現象にビビる</h2>

<p>UI Bootstrap の <a href="http://angular-ui.github.io/bootstrap/#/alert">alert</a> と、<a href="https://github.com/angular-app/angular-app">angular-app</a> あたりを参考にしながらメッセージ表示機能を実装していたら、どんどんメッセージが増殖してくのでビビった。１件メッセージを追加するたびに、メッセージ配列ごと増えるという…。</p>

<h2>増殖現象デモ</h2>

<p></p>

<script src="http://angularjsninja.com//code.angularjs.org/1.2.0/angular.min.js"></script>


<script src="http://angularjsninja.com//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.6.0/ui-bootstrap.min.js"></script>


<script src="http://angularjsninja.com//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.6.0/ui-bootstrap-tpls.min.js"></script>


<script>
angular.module('Ninja', ['ui.bootstrap'])
  .controller('NotificationsCtrl', function($scope) {
    $scope.i = 0;
    $scope.notifications = [];
    $scope.addMessage = function(message, type) {
      $scope.notifications.push({
        message: message + $scope.i++,
        type: type || 'error'
      });
    };
  });
</script>


<div ng-app="Ninja" ng-controller="NotificationsCtrl" ng-cloak>
  <a href="" ng-click="addMessage('message:')">Add a message: {{i}}</a>　← 何回かクリック！
  <div ng-if="notifications.length">
    <alert type="notification.type" ng-repeat="notification in notifications">
      {{notification.message}}
    </alert>
  </div>
</div>


<p></p>

<!-- more -->


<h2>サンプルコード</h2>

<p>
``` html</p>

<script src="http://angularjsninja.com//code.angularjs.org/1.2.0/angular.min.js"></script>


<script src="http://angularjsninja.com//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.6.0/ui-bootstrap.min.js"></script>


<script src="http://angularjsninja.com//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.6.0/ui-bootstrap-tpls.min.js"></script>


<script>
angular.module('Ninja', ['ui.bootstrap'])
  .controller('NotificationsCtrl', function($scope) {
    $scope.i = 0;
    $scope.notifications = [];
    $scope.addMessage = function(message, type) {
      $scope.notifications.push({
        message: message + $scope.i++,
        type: type || 'error'
      });
    };
  });
</script>


<div ng-app="Ninja" ng-controller="NotificationsCtrl" ng-cloak>
  <a href="" ng-click="addMessage('message:')">Add a message: {{i}}</a>
  <div ng-if="notifications.length">
    <alert type="notification.type" ng-repeat="notification in notifications">
      {{notification.message}}
    </alert>
  </div>
</div>


<p>```
</p>

<h2>ng-if には truthy じゃなく、true / false をちゃんと渡そう</h2>

<p>はじめは ng-repeat のバグなのかなと思っていたら、その外側の要素ごと増殖していってることに気付いた。つまり ng-if が怪しい。</p>

<p>上記のコードでの ng-if は、notifications 配列が空っぽだったら要素ごと消しとこうってことで付けている。その ng-if に truthy な（別の）値を渡すと増殖現象になってしまうようだ。</p>

<p>そんなわけで、ちゃんと true / false にして渡しましょう。</p>

<p><code>html
NG: &lt;div ng-if="notifications.length"&gt;
OK: &lt;div ng-if="!!notifications.length"&gt;
</code>
てことで、増殖現象に出会ったら、この記事のことを思い出してくださーい。</p>

<p>追記：AngularJS <a href="https://github.com/angular/angular.js/blob/master/CHANGELOG.md#121-underscore-empathy-2013-11-14">1.2.1 underscore-empathy</a> で、早速バグフィックスされましたね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSのng-classを使いこなそう]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/12/angularjs-ngclass/"/>
    <updated>2013-11-12T16:16:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/12/angularjs-ngclass</id>
    <content type="html"><![CDATA[<hr />

<h2>ng-class とは</h2>

<p><a href="http://docs.angularjs.org/api/ng.directive:ngClass">ng-class</a> は、HTML 要素に CSS class 属性値を動的にセットできる directive で、ほんとよく使う。</p>

<p>すでに同じ class 属性値が要素にセットされてるときは、重複しないようになっているあたりもいい感じ。</p>

<p>ng-class の使い方は、スペース区切りの class 文字列<code>'active disabled'</code>を保持する変数や、class 属性値文字列の配列<code>['active', 'disabled']</code>を保持する変数を指定する。</p>

<p>けれど一番良く使うのは、class 属性値と boolean 値をマッピングした object で、これを ng-class に指定する使い方について紹介。</p>

<!-- more -->


<h2>ng-class の利用例</h2>

<p><code>javascript link
scope.isActive = function (matchIdx) {
  return scope.active == matchIdx;
};
scope.selectActive = function (matchIdx) {
  return scope.active = matchIdx;
};
</code></p>

<p>
<code>html template
&lt;li ng-repeat="match in matches" ng-class="{active: isActive($index)}" ng-mouseenter="selectActive($index)"&gt;
</code>
</p>

<p>UI Bootstrap の <a href="http://angular-ui.github.io/bootstrap/#/typeahead">Typeahead</a> から抜き出したコードで、マウスホバーされた行のインデックスを active で保持し、ng-class では<code>isActive</code>で boolean を返す isActive を指定していて、ホバー行では<code>class="ng-scope active"</code>となり、その他の行では<code>class="ng-scope"</code>となるような指定になっている。</p>

<p>ちなみに、<code>$index</code>は ng-repeat で利用できるインデックス（0..length-1）で、<code>ng-scope</code>は scope ができる要素に AngularJS が自動的に付けてる class。</p>

<h2>ng-class を controller で実装してみる</h2>

<p>たくさんの class 属性値を制御したい場合、ng-class の指定がすごく長くなって微妙な気分になってくるので、そんなときは controller のほうに移すのもいいかもしれない（CSS の class が JavaScript 側に行ってしまうのもまた微妙だけれど）。</p>

<p>ソート列のアイコンを変える UI を実現するサンプルコードはこんな感じに。</p>

<p>
``` html
<link href="http://angularjsninja.com//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css" rel="stylesheet"></p>

<script src="http://angularjsninja.com//code.angularjs.org/1.2.0/angular.min.js"></script>


<script>
angular.module('Ninja', [])
.controller('SortCtrl', function($scope) {
  $scope.sortField = undefined;
  $scope.ascending = true;
  $scope.sort = function(fieldName) {
    if ($scope.sortField == fieldName) {
      $scope.ascending = !$scope.ascending;
    } else {
      $scope.sortField = fieldName;
      $scope.ascending = true;
    }
  };
  var isSortedBy = function(fieldName) {
    return $scope.sortField === fieldName;
  };
  var isSortedAscending = function(fieldName) {
    return isSortedBy(fieldName) && $scope.ascending;
  };
  var isSortedDescending = function(fieldName) {
    return isSortedBy(fieldName) && !$scope.ascending;
  };
  $scope.iconSort = function(fieldName) {
    return {
      'icon-sort': !isSortedBy(fieldName),
      'icon-sort-up': isSortedAscending(fieldName),
      'icon-sort-down': isSortedDescending(fieldName)
    };
  };
});
</script>


<table ng-app="Ninja" class="demo">
  <thead ng-controller="SortCtrl">
    <tr>
      <th ng-click="sort('name')">
        Name <i ng-class="iconSort('name')"></i>
      </th>
      <th ng-click="sort('modified')">
        Date Modified <i ng-class="iconSort('modified')"></i>
      </th>
      <th ng-click="sort('size')">
        Size <i ng-class="iconSort('size')"></i>
      </th>
      <th ng-click="sort('kind')">
        Kind <i ng-class="iconSort('kind')"></i>
      </th>
    </tr>
  </thead>
</table>


<p>```
</p>

<p><link href="http://angularjsninja.com//netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css" rel="stylesheet"></p>

<script src="http://angularjsninja.com//code.angularjs.org/1.2.0/angular.min.js"></script>


<script>
angular.module('Ninja', [])
.controller('SortCtrl', function($scope) {
  $scope.sortField = undefined;
  $scope.ascending = true;
  $scope.sort = function(fieldName) {
    if ($scope.sortField == fieldName) {
      $scope.ascending = !$scope.ascending;
    } else {
      $scope.sortField = fieldName;
      $scope.ascending = true;
    }
  };
  var isSortedBy = function(fieldName) {
    return $scope.sortField === fieldName;
  };
  var isSortedAscending = function(fieldName) {
    return isSortedBy(fieldName) && $scope.ascending;
  };
  var isSortedDescending = function(fieldName) {
    return isSortedBy(fieldName) && !$scope.ascending;
  };
  $scope.iconSort = function(fieldName) {
    return {
      'icon-sort': !isSortedBy(fieldName),
      'icon-sort-up': isSortedAscending(fieldName),
      'icon-sort-down': isSortedDescending(fieldName)
    };
  };
});
</script>


<table ng-app="Ninja" class="demo">
  <thead ng-controller="SortCtrl">
    <tr>
      <th ng-click="sort('name')">
        Name <i ng-class="iconSort('name')"></i>
      </th>
      <th ng-click="sort('modified')">
        Date Modified <i ng-class="iconSort('modified')"></i>
      </th>
      <th ng-click="sort('size')">
        Size <i ng-class="iconSort('size')"></i>
      </th>
      <th ng-click="sort('kind')">
        Kind <i ng-class="iconSort('kind')"></i>
      </th>
    </tr>
  </thead>
</table>


<p>見どころは 25 行目の<code>$scope.iconSort</code>function で return している object で、この<code>iconSort</code>を ng-class で使ってソートのアイコン表示を切り替えている。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSのng-listが便利なようで便利でなく、でもやっぱり便利]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/08/angularjs-nglist/"/>
    <updated>2013-11-08T01:16:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/08/angularjs-nglist</id>
    <content type="html"><![CDATA[<hr />

<h2>ngList とは</h2>

<p><a href="http://docs.angularjs.org/api/ng.directive:ngList">ngList</a> は、テキストボックスに入力された区切り文字列と、文字列配列のモデルとを相互に変換してくれる directive です。</p>

<p>区切り文字（delimiter）のデフォルトはカンマですが、別の文字列や、正規表現も使えます。</p>

<p>うん、なんだか便利な感じ！</p>

<!-- more -->


<h2>さっそく使ってみたけど、便利じゃない…</h2>

<ul>
<li>配列に文字列を追加・削除してもテキストボックスの表示変わらんやん…</li>
<li>正規表現はおろか、何を指定してもカンマとして動いてくれちゃうやん…</li>
</ul>


<p>なんだろう、あきらかに不具合だよ、これは。</p>

<p>てことで、いつものように Stack Overflow に頼る。</p>

<p><a href="http://stackoverflow.com/questions/15590140/ng-list-input-not-updating-when-adding-items-to-array">javascript &ndash; ng-list input not updating when adding items to array &ndash; Stack Overflow</a></p>

<p><blockquote><p>Formatters are only invoked if the value is strictly not equal to the previous value, but since it is the same array instance in your first example, that statement evaluates to false, and hence the text field isn&rsquo;t updated.</p></blockquote></p>

<p>配列の中身が変わっても知らんしって実装になってるから更新されへんねんでってことね。</p>

<h2>でもやっぱり便利だから使えるようにしたい</h2>

<p>AngularJS 本体のコードを修正して Pull Req&hellip;。いやいや、敷居が高い。</p>

<p>とりあえずの対応としては、配列に文字列を追加・削除するたびに配列を新しくしちゃえば動く。</p>

<h2>デモとサンプルコード</h2>

<hr />

<div ng-app>
  <script src="http://codeorigin.jquery.com/jquery-2.0.3.min.js"></script>
  <script src="http://code.angularjs.org/1.2.0-rc.3/angular.min.js"></script>  
  <script>
    function TagCtrl($scope) {
      $scope.tags = [];
      $scope.select = function(tag) {
        if ($scope.contains(tag, $scope.tags)) {
          var tags = [];
          angular.forEach($scope.tags, function(t) {
            if (tag != t) {
              tags.push(t);
            }
          });
          $scope.tags = tags;
        } else {
          $scope.tags = angular.copy($scope.tags);
          $scope.tags.push(tag);
        }
      };
      $scope.contains = function(value, array) {
        return 0 <= $.inArray(value, array);
      };
    }
  </script>
  <div ng-controller="TagCtrl">
    <input type="text" ng-model="tags" ng-list><br>
    <a href="" ng-click="select('Red')">Red</a>    
    <a href="" ng-click="select('Orange')">Orange</a>
    <a href="" ng-click="select('Yellow')">Yellow</a>
    <a href="" ng-click="select('Green')">Green</a>
    <a href="" ng-click="select('Blue')">Blue</a>
    <a href="" ng-click="select('Purple')">Purple</a>
    <a href="" ng-click="select('Gray')">Gray</a>
  </div>
</div>


<hr />

<p>``` html</p>

<div ng-app>
  <script src="http://codeorigin.jquery.com/jquery-2.0.3.min.js"></script>
  <script src="http://code.angularjs.org/1.2.0-rc.3/angular.min.js"></script>  
  <script>
    function TagCtrl($scope) {
      $scope.tags = [];
      $scope.select = function(tag) {
        if ($scope.contains(tag, $scope.tags)) {
          var tags = [];
          angular.forEach($scope.tags, function(t) {
            if (tag != t) {
              tags.push(t);
            }
          });
          $scope.tags = tags;
        } else {
          $scope.tags = angular.copy($scope.tags);
          $scope.tags.push(tag);
        }
      };
      $scope.contains = function(value, array) {
        return 0 <= $.inArray(value, array);
      };
    }
  </script>
  <div ng-controller="TagCtrl">
    <input type="text" ng-model="tags" ng-list><br>
    <a href="" ng-click="select('Red')">Red</a>    
    <a href="" ng-click="select('Orange')">Orange</a>
    <a href="" ng-click="select('Yellow')">Yellow</a>
    <a href="" ng-click="select('Green')">Green</a>
    <a href="" ng-click="select('Blue')">Blue</a>
    <a href="" ng-click="select('Purple')">Purple</a>
    <a href="" ng-click="select('Gray')">Gray</a>
  </div>
</div>


<p>```</p>

<h2>区切り文字の変更は？</h2>

<p>まあ、とりあえずカンマ区切りでヨシということで。ここの <a href="https://github.com/angular/angular.js/blob/v1.2.0-rc.3/src/ng/directive/input.js#L1381">value.join(&lsquo;, &rsquo;)</a> がおかしいんだろうと思いつつも、必要になるまで置いとこう。</p>
]]></content>
  </entry>
  
</feed>
