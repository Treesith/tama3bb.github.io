<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AngularJS | AngularJS Ninja]]></title>
  <link href="http://angularjsninja.com/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://angularjsninja.com/"/>
  <updated>2013-09-09T23:34:24+09:00</updated>
  <id>http://angularjsninja.com/</id>
  <author>
    <name><![CDATA[Akihito Tamagawa]]></name>
    <email><![CDATA[tama3bb@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS 1.2 で追加されたng-repeat-startとng-repeat-end]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/08/angularjs-1.2-ngrepeatstart-ngrepeatend/"/>
    <updated>2013-09-08T20:33:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/08/angularjs-1.2-ngrepeatstart-ngrepeatend</id>
    <content type="html"><![CDATA[<hr />

<p>AngularJS 1.2 で追加された新しい directive の<code>ng-repeat-start</code>と<code>ng-repeat-end</code>を紹介。</p>

<p>通常の<a href="http://docs.angularjs.org/api/ng.directive:ngRepeat"><code>ng-repeat</code></a>では実現しにくかった複数の要素にまたがった繰り返しが可能になる。</p>

<!-- more -->


<h2>ul / ol</h2>

<p>コードを見るほうがわかりやすいので、まずは通常の<code>ng-repeat</code>で<code>&lt;li&gt;</code>を繰り返すコード例から。</p>

<p>``` html</p>

<ul>
  <li ng-repeat="user in users">user.name</li>
</ul>


<p>```</p>

<h2>dl</h2>

<p>次は<code>&lt;dl&gt;</code>の例。このケースでは<code>ng-repeat-start</code>と<code>ng-repeat-end</code>を使う。</p>

<p>``` html</p>

<dl>
  <dt ng-repeat-start="user in users">user.name</li>
  <dd ng-repeat-end>user.description</li>
</dl>


<p>```</p>

<p><code>&lt;dl&gt;</code>は特殊で、<code>&lt;dt&gt;</code>と<code>&lt;dd&gt;</code>が交互に並び<code>&lt;dl&gt;</code>で囲まれない。そのため、ng-repeat ではうまく指定できなかった。<code>&lt;dl&gt;</code>に対して ng-repeat を指定すると<code>&lt;dl&gt;</code>ごと繰り返されてしまう。</p>

<p><code>ng-repeat-start</code>と<code>ng-repeat-end</code>を利用すると、<code>&lt;dt&gt;&lt;dd&gt;&lt;dt&gt;&lt;dd&gt;</code>のように、<code>&lt;dt&gt;</code>と<code>&lt;dd&gt;</code>がセットで繰り返される。</p>

<h2>table</h2>

<p>また、以下のテーブルのコード例のように、2 行分を繰り返すような場合にも<code>ng-repeat-start</code>と<code>ng-repeat-end</code>を利用するとうまくいく。</p>

<p>``` html</p>

<table>
  <tbody>
    <tr ng-repeat-start="user in users">
      <td>user.name</td>
      <td>user.sex</td>
    </tr>
    <tr ng-repeat-end>
      <td colspan="2">user.description</td>
    </tr>
  </tbody>
</table>


<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS の学習リソースまとめ]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/07/learning-angularjs/"/>
    <updated>2013-09-07T23:58:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/07/learning-angularjs</id>
    <content type="html"><![CDATA[<hr />

<h2><img src="http://dotinstall.com/img/topbar_logo.png" alt="ドットインストール" /></h2>

<p>なにはともあれドットインストール。最強の動画学習サイト。</p>

<p><a href="http://dotinstall.com/lessons/basic_angularjs">AngularJS入門 (全12回) &ndash; プログラミングならドットインストール</a></p>

<p>動画学習でオススメなのは、動画の再生速度を 1.5 倍速か 2 倍速にすること。時は金なり。</p>

<p>ドットインストールは初心者向けの内容なので、今後は中級者向けの動画も提供されていくことを期待！</p>

<!-- more -->


<hr />

<h2>Qiita</h2>

<p><a href="http://qiita.com/tags/angularjs/items">AngularJS&rsquo;s new posts &ndash; Qiita</a></p>

<p>情報たくさんあって活気ある Qiita。私も Qiita で情報発信したほうがたくさんの人に見てもらえただろうな…。</p>

<hr />

<h2><img src="https://raw.github.com/angular/angular.js/master/images/logo/AngularJS.exports/AngularJS-small.png" alt="AngularJS 公式サイト" /></h2>

<p><a href="http://angularjs.org/">AngularJS — Superheroic JavaScript MVW Framework</a></p>

<p>AngularJS 公式サイト。トップページだけでなく、Tutorial、Developer Guide、API Reference と見どころ満載。API Reference は頻繁に訪れることに。</p>

<hr />

<h2><img src="http://www.youtube.com/yt/brand/media/image/yt-brand-standard-logo-95x40.png" alt="Youtube" /></h2>

<p><a href="http://www.youtube.com/user/angularjs">AngularJS &ndash; YouTube</a></p>

<p>AngularJS の YouTube チャンネル。プログラミング系の学習は動画とホント相性がいい。最初のうちはとにかく動画から吸収しよう。</p>

<hr />

<h2><img src="http://d3gqmx6sr7od7s.cloudfront.net/assets/logo-1f7bbe07d5a965bf3720a02869dc7e95.svg" alt="egghead.io" /></h2>

<p><a href="http://www.egghead.io/">AngularJS: Awesome Tutorial Videos, Workshops, and Training &ndash; @eggheadio</a></p>

<p>AngularJS の動画学習サイトで、質が高い。AngularJS のキモと言える Directive について詳しく説明している。</p>

<hr />

<h2><img src="http://upload.wikimedia.org/wikipedia/en/9/95/Stack_Overflow_website_logo.png" alt="Stack Overflow" /></h2>

<p><a href="http://stackoverflow.com/questions/tagged/angularjs">Highest Voted &lsquo;angularjs&rsquo; Questions &ndash; Stack Overflow</a></p>

<p>Stack Overflow はホントすごいサイト。このサイトのお陰で自分の仕事が成立していると言っても過言ではないと思う。</p>

<hr />

<h2>洋書</h2>

<p>『<a href="http://shop.oreilly.com/product/0636920028055.do">AngularJS</a>』by Brad Green, Shyam Seshadri &ndash; April 2013</p>

<p>『<a href="http://www.packtpub.com/angularjs-web-application-development/book">Mastering Web Application Development with AngularJS</a>』by Peter Bacon Darwin, Pawel Kozlowski &ndash; August 2013</p>

<p>『<a href="http://www.manning.com/bford/">AngularJS in Action</a>』by Brian Ford, Lukas Ruebbelke &ndash; January 2014</p>

<p>とりあえずこの 3 冊。後発だけあって、後の 2 冊のほうが内容充実。AngularJS in Action は未完の書籍で、Early Access Edition で全 13 章のうち 5 章まで読める（2013年9月7日現在）。</p>

<hr />

<h2>AngularJS-Learning</h2>

<p><a href="https://github.com/jmcunningham/AngularJS-Learning">jmcunningham/AngularJS-Learning</a></p>

<p>AngularJS 学習系リソースまとめページ。リンク多過ぎて始めにここ見るとしんどくなるけど、きちんと分類されてる。</p>

<hr />

<h2>GitHub</h2>

<p><a href="https://github.com/search?q=angular">Search · angular</a></p>

<p>GitHub で実践的に。ここで angular で検索し、Star がたくさん付いてるもののコードを眺めていく。</p>

<hr />

<h2>Twitter</h2>

<p><a href="https://twitter.com/angularjs">@angularjs</a></p>

<p>AngularJS の情報がリツイートされてくるので、AngularJS 情報を日常的に取りたいときにはフォロー。</p>

<hr />

<h2>AngularJS Ninja</h2>

<p><a href="http://angularjsninja.com/">AngularJS Ninja</a></p>

<p>地道にコツコツと AngularJS の情報を発信していくでござる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初回アクセス時やリロード時だけng-viewの部分が表示されない場合の解決方法]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/06/ngview-does-not-work-at-initial-route/"/>
    <updated>2013-09-06T18:53:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/06/ngview-does-not-work-at-initial-route</id>
    <content type="html"><![CDATA[<hr />

<p>ng-view で表示する部分が、初回アクセス時やリロード時だけ表示されない場合の解決方法について。</p>

<p>この現象は、ng-view が ng-include の中に入っている場合に発生してしまうようで、このページの情報のおかげで解決できた。</p>

<p><a href="https://github.com/angular/angular.js/issues/1213">Initial route update doesn&rsquo;t happen if ngView in a template loaded by ngInclude</a></p>

<!-- more -->


<p>コードはこれだけ。</p>

<p><code>javascript app.js
myApp.run(['$route', function($route)  {
  $route.reload();
}]);
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS アプリケーションを国際化するには]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/05/angularjs-i18n/"/>
    <updated>2013-09-05T19:49:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/05/angularjs-i18n</id>
    <content type="html"><![CDATA[<hr />

<p><img src="http://pascalprecht.github.io/angular-translate/docs/en/img/logo/angular-translate-alternative/angular-translate_alternative_medium2.png" alt="angular-translate" /></p>

<p>AngularJS アプリケーションを国際化するには、<a href="http://pascalprecht.github.io/angular-translate/">angular-translate</a> を使うのがとてもいい感じなので紹介。</p>

<p>簡単な特徴</p>

<ul>
<li>言語ごとにリソースファイルを分けられる</li>
<li>表示する言語のファイルだけを非同期に読み込める</li>
<li>選択言語を LocalStorage または Cookie に保存してくれる</li>
</ul>


<!-- more -->


<h2>angular-translate のインストール</h2>

<p>Bower でモジュールをインストールし、JS ファイルを適当なとこに置いて HTML から参照させて、AngularJS の依存モジュールとして記述。
<code>
$ bower install angular-translate
$ bower install angular-translate-storage-cookie
$ bower install angular-translate-storage-local
$ bower install angular-translate-loader-static-files
$ bower install angular-translate-handler-log
</code>
``` html index.html
<html>
  <head></p>

<pre><code>&lt;meta charset="utf-8"&gt;
&lt;title&gt;i18n app&lt;/title&gt;

&lt;script src="path/to/angular.min.js"&gt;&lt;/script&gt;
&lt;script src="path/to/angular-translate.min.js"&gt;&lt;/script&gt;
&lt;script src="path/to/angular-translate-storage-cookie.min.js"&gt;&lt;/script&gt;
&lt;script src="path/to/angular-translate-storage-local.min.js"&gt;&lt;/script&gt;
&lt;script src="path/to/angular-translate-loader-static-files.min.js"&gt;&lt;/script&gt;
&lt;script src="path/to/angular-translate-handler-log.min.js"&gt;&lt;/script&gt;
&lt;script src="app.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head></p>

<p>  <body ng-app="myApp"></p>

<p>  </body>
</html>
<code>
</code> javascript app.js
var app = angular.module(&lsquo;myApp&rsquo;, [&lsquo;pascalprecht.translate&rsquo;]);
```</p>

<h2>$translateProvider の設定</h2>

<p>$translateProvider を config で設定。</p>

<p>``` javascript
app.config([&lsquo;$translateProvider&rsquo;, function($translateProvider) {
  $translateProvider.useStaticFilesLoader({</p>

<pre><code>prefix: 'assets/i18n/locale-',
suffix: '.json'
</code></pre>

<p>  });
  $translateProvider.preferredLanguage(&lsquo;ja&rsquo;);
  $translateProvider.fallbackLanguage(&lsquo;en&rsquo;);
  $translateProvider.useMissingTranslationHandlerLog();
  $translateProvider.useLocalStorage();
}]);
```</p>

<ul>
<li>useStaticFilesLoader でリソースファイルのファイルパスを指定</li>
<li>preferredLanguage でデフォルトの言語キーを指定</li>
<li>fallbackLanguage で選択言語にリソースが見つからない場合の言語を指定</li>
<li>useMissingTranslationHandlerLog でキーに対応するリソースが見つからない場合に console 出力</li>
<li>useLocalStorage で選択言語の保存先として localStorage を指定（非対応ブラウザでは Cookie に保存される）</li>
</ul>


<p><code>
assets/i18n/
├── locale-en.json
└── locale-ja.json
</code>
リソースファイルは、en や ja などの言語キーの前（prefix）と後（suffix）を指定。</p>

<h2>リソースの記述方法</h2>

<p>JSON オブジェクトとして記述。ネストもできる。
``` javascript assets/i18n/locale-en.json
{
  &ldquo;HEADLINE&rdquo;: &ldquo;What an awesome module!&rdquo;,
  &ldquo;PARAGRAPH&rdquo;: &ldquo;Srsly!&rdquo;,
  &ldquo;NAMESPACE&rdquo;: {</p>

<pre><code>"PARAGRAPH": "And it comes with awesome features!"
</code></pre>

<p>  }
}
```</p>

<h2>HTML で利用するには</h2>

<p>HTML で利用する場合には、translate フィルタ、または translate ディレクティヴで。</p>

<p>``` html filters</p>

<h2>{{ 'HEADLINE' | translate }}</h2>


<p>{{ 'PARAGRAPH' | translate }}</p>


<p><code>
</code> html directives</p>

<h2 translate>HEADLINE</h2>


<p translate="PARAGRAPH"></p>


<p>```</p>

<h2>controller で利用するには</h2>

<p>controller で利用する場合には、$translate サービスで。</p>

<p><code>javascript controllers.js
app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
  $scope.headline = $translate('HEADLINE');
  $scope.paragraph = $translate('PARAGRAPH');
  $scope.namespaced_paragraph = $translate('NAMESPACE.PARAGRAPH');
}]);
</code></p>

<h2>変数を使った置換</h2>

<p>メッセージの一部を置き換えられる。</p>

<p><code>
{
  "TRANSLATION_ID": "{{username}} is logged in."
}
</code></p>

<p>``` javascript controllers.js
angular.module(&lsquo;myApp&rsquo;).controller(&lsquo;Ctrl&rsquo;, [&lsquo;$scope&rsquo;, function ($scope) {</p>

<p>  $scope.translationData = {</p>

<pre><code>username: 'PascalPrecht'
</code></pre>

<p>  };
}]);
```</p>

<p>以下のように渡す。
<code>javascript controllers.js
$translate('TRANSLATION_ID', $scope.translationData);
</code>
<code>html filters
{{ 'TRANSLATION_ID' | translate:translationData }}
</code>
<code>html directive
&lt;ANY translate="TRANSLATION_ID" translate-values=""&gt;&lt;/ANY&gt;
</code></p>

<h2>言語の切り替え</h2>

<p>言語を切り替える場合は、$translate の uses で。</p>

<p>``` javascript controllers.js
angular.module(&lsquo;myApp&rsquo;).controller(&lsquo;Ctrl&rsquo;, [&lsquo;$translate&rsquo;, &lsquo;$scope&rsquo;, function ($translate, $scope) {</p>

<p>  $scope.changeLanguage = function (langKey) {</p>

<pre><code>$translate.uses(langKey);
</code></pre>

<p>  };</p>

<p>}]);
```
こんな感じかな。</p>

<p><code>html
&lt;button ng-click="changeLanguage('ja')" translate="BUTTON_LANG_JA"&gt;&lt;/button&gt;
&lt;button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"&gt;&lt;/button&gt;
</code>
<code>javascript assets/i18n/locale-ja.json
{
  "BUTTON_LANG_JA": "日本語",
  "BUTTON_LANG_EN": "英語"
}
</code></p>

<p>たいへん便利な国際化モジュール、angular-translate の紹介でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS で HTML をエスケープさせずに出力するには]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/04/angularjs-ng-bind-html/"/>
    <updated>2013-09-04T16:49:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/04/angularjs-ng-bind-html</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS での出力手段</h2>

<p>AngularJS で単に文字列を出力するには、<code>{{expression}}</code>または<a href="http://docs.angularjs.org/api/ng.directive:ngBind"><code>ng-bind</code></a>を HTML で利用する。</p>

<p><code>html
&lt;span&gt;{{ninja.name}}&lt;/span&gt;
&lt;span ng-bind="ninja.name"&gt;&lt;/span&gt;
</code></p>

<!-- more -->


<h2>{{expression}} が一瞬表示されてチラつく場合の対処方法</h2>

<p><code>{{expression}}</code>をエントリーポイントの index.html で利用すると、AngularJS が処理するまで<code>{{expression}}</code>がそのままページに表示され、値が切り替わるときにチラついてしまう。</p>

<p>この問題に対しては、<code>ng-bind</code>を利用するか、<a href="http://docs.angularjs.org/api/ng.directive:ngCloak"><code>ng-cloak</code></a>を以下のように利用することで解決できる。</p>

<p><code>html
&lt;span ng-cloak&gt;{{ninja.name}}&lt;/span&gt;
</code></p>

<p>なお、<a href="http://docs.angularjs.org/api/ngRoute.directive:ngView">ng-view</a> や <a href="http://docs.angularjs.org/api/ng.directive:ngInclude">ng-include</a> で挿入される断片（partial）の HTML では、このチラつく現象は発生しないため、ng-cloak の記述は不要である。</p>

<h2>HTML をエスケープさせずに出力するには</h2>

<p>HTML をエスケープさせずに出力するには、<a href="http://docs.angularjs.org/api/ng.directive:ngBindHtml"><code>ng-bind-html</code></a>を利用する。</p>

<p><code>html
&lt;span ng-bind-html="ninja.htmlContent"&gt;&lt;/span&gt;
</code></p>

<p>この<code>ng-bind-html</code>は、別のモジュール（ngSanitize）に分かれているため、angular-sanitize.min.js を index.html で参照し、依存するモジュールとして記述する必要がある。</p>

<p>``` html index.html</p>

<script src="assets/lib/angular-1.1.5/angular-sanitize.min.js"></script>


<p><code>
</code> javascript app.js
var app = angular.module(&lsquo;app&rsquo;, [&lsquo;ngSanitize&rsquo;]);
```</p>

<h2>サニタイズせずに出力するには</h2>

<p>出力する内容が安全であるとわかっている場合には、<a href="http://docs.angularjs.org/api/ng.$sce#trustAsHtml">$sce.trustAsHtml</a> を利用してまったくサニタイズせずに出力することができる。</p>

<p>また、バージョン 1.1 までであれば、ngSanitize モジュールを利用することなく<code>ng-bind-html-unsafe</code>を利用できる。</p>
]]></content>
  </entry>
  
</feed>
