<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AngularJS | AngularJS Ninja]]></title>
  <link href="http://angularjsninja.com/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://angularjsninja.com/"/>
  <updated>2014-01-17T14:48:28+09:00</updated>
  <id>http://angularjsninja.com/</id>
  <author>
    <name><![CDATA[Akihito Tamagawa]]></name>
    <email><![CDATA[tama3bb@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Angular カンファレンス（ng-conf 2014）Jan. 16 動画まとめ]]></title>
    <link href="http://angularjsninja.com/blog/2014/01/17/ng-conf-2014/"/>
    <updated>2014-01-17T14:32:50+09:00</updated>
    <id>http://angularjsninja.com/blog/2014/01/17/ng-conf-2014</id>
    <content type="html"><![CDATA[<hr />

<h2>ng-conf 2014 &ndash; The World&rsquo;s First Angular Conference in Salt Lake City, Utah</h2>

<p>Angular カンファレンス <a href="http://ng-conf.org">ng-conf 2014</a> が、アメリカはユタ州ソルトレイクシティで開催中です。</p>

<p>YouTube の <a href="http://www.youtube.com/user/ngconfvideos">ng-conf 2014 チャンネル</a> のほうに動画はまとめてアップロードされていますが、このエントリーでは当日のスケジュールどおりに並べています。</p>

<h3>Keynote</h3>

<iframe width="560" height="315" src="http://angularjsninja.com//www.youtube.com/embed/r1A1VR0ibIQ" frameborder="0" allowfullscreen></iframe>


<p>Miško Hevery &amp; Brad Green</p>

<!-- more -->


<h3>AngularJS in 20-ish Minutes</h3>

<iframe width="560" height="315" src="http://angularjsninja.com//www.youtube.com/embed/tnXO-i7944M" frameborder="0" allowfullscreen></iframe>


<p>Dan Wahlin</p>

<h3>Writing a Massive Angular App</h3>

<iframe width="560" height="315" src="http://angularjsninja.com//www.youtube.com/embed/62RvRQuMVyg" frameborder="0" allowfullscreen></iframe>


<p>The Google Double Click Team</p>

<h3>Going Postal with Angular in Promises</h3>

<iframe width="560" height="315" src="http://angularjsninja.com//www.youtube.com/embed/XcRdO5QVlqE" frameborder="0" allowfullscreen></iframe>


<p>Christian Lilley</p>

<h3>Deep Dive into Custom Directives</h3>

<iframe width="560" height="315" src="http://angularjsninja.com//www.youtube.com/embed/UMkd0nYmLzY" frameborder="0" allowfullscreen></iframe>


<p>Dave Smith</p>

<h3>Progressive Saving</h3>

<iframe width="560" height="315" src="http://angularjsninja.com//www.youtube.com/embed/JLij19xbefI" frameborder="0" allowfullscreen></iframe>


<p>John Papa</p>

<h3>Rapid Prototyping with Angular &amp; Deployd</h3>

<iframe width="560" height="315" src="http://angularjsninja.com//www.youtube.com/embed/0V8fQoqQLLA" frameborder="0" allowfullscreen></iframe>


<p>Jeff Cross</p>

<h3>Rich Data Models &amp; Angular</h3>

<iframe width="560" height="315" src="http://angularjsninja.com//www.youtube.com/embed/JfykD-0tpjI" frameborder="0" allowfullscreen></iframe>


<p>Ben Teese</p>

<h3>Angular Weapon Defense</h3>

<iframe width="560" height="315" src="http://angularjsninja.com//www.youtube.com/embed/f62k7b753-Y" frameborder="0" allowfullscreen></iframe>


<p>Tom Valletta &amp; Gabe Dayley</p>

<h3>Filters: Beyond OrderBy and LimitTo</h3>

<iframe width="560" height="315" src="http://angularjsninja.com//www.youtube.com/embed/L4FJ_kuO9Rc" frameborder="0" allowfullscreen></iframe>


<p>Sharon DiOrio</p>

<h3>Awesome Interfaces with AngularJS Animations</h3>

<iframe width="560" height="315" src="http://angularjsninja.com//www.youtube.com/embed/hC0MpgUoui4" frameborder="0" allowfullscreen></iframe>


<p>Lukas Rubbelke &amp; Matias Niemela</p>

<h3>Dependency Injection</h3>

<iframe width="560" height="315" src="http://angularjsninja.com//www.youtube.com/embed/_OGGsf1ZXMs" frameborder="0" allowfullscreen></iframe>


<p>Vojta Jina</p>

<h3>Angular Team Panel</h3>

<iframe width="560" height="315" src="http://angularjsninja.com//www.youtube.com/embed/srt3OBP2kGc" frameborder="0" allowfullscreen></iframe>


<p>Angular Team</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS のデータバインドを支える $apply]]></title>
    <link href="http://angularjsninja.com/blog/2013/12/27/angularjs-apply/"/>
    <updated>2013-12-27T16:19:50+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/12/27/angularjs-apply</id>
    <content type="html"><![CDATA[<hr />

<h2>データバインドが効かない？！</h2>

<p>AngualrJS を使っていて楽しいのは超ラクチンなデータバインド。なのに、そのデータバインドで以下のような困ったことに遭遇しているとしたら、それは <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$apply">$apply</a> を学ぶときが来ているということ。</p>

<ul>
<li>データバインドが効かないぞ？！</li>
<li>データの反映が次のイベントまで遅れてる気がする？？</li>
</ul>


<p>こういうときは $apply の出番だ。$apply を使う必要があるケースというのは、ざくっと言うと AngularJS が知りえないところでイベントが起こっているとき。$apply で AngularJS に変化が起きていることを伝え、後のことは任せることができる。</p>

<!-- more -->


<h2>$apply が必要ないケース</h2>

<p>整合性を維持するための dirty checking（$watch）処理は、$digest ループ（サイクル）でまとめて実行される。この $digest ループが始まるきっかけは、『<a href="/blog/2013/12/13/angularjs-watch/">AngularJS のデータバインドを支える $watch</a>』 のページにも掲載した以下に示す各種イベント。</p>

<table>
<thead>
<tr>
<th>イベント </th>
<th> 概要</th>
</tr>
</thead>
<tbody>
<tr>
<td>ナビゲーション </td>
<td> ブラウザの location 変更時</td>
</tr>
<tr>
<td>ネットワーク </td>
<td> $http, $resource レスポンス受信時</td>
</tr>
<tr>
<td>DOM イベント </td>
<td> ng-click, ng-mouseover などの実行時</td>
</tr>
<tr>
<td>タイマー </td>
<td> $timeout によるタイマー処理の実行時</td>
</tr>
</tbody>
</table>


<p>こういった処理によってデータや UI に変更があった場合のことは、$apply を自分で記述することなく AngularJS におまかせできる。こうしたイベントでは、内部的に $apply が使われている。</p>

<h2>$apply が必要なケース</h2>

<p>じゃあ、どういうときには $apply を自分で記述する必要があるのか。それは、AngularJS 組み込みの services（$http や $timeout など）や directives（ng-click など）を使わない（使えない）とき、ということ。</p>

<p>AngularJS と無関係なところ（jQuery など）で XHR 通信して受け取ったデータをモデルに反映した場合や、あるいは datepicker などのプラグインからモデルに値を反映した場合は、そのモデルと UI が ng-model や ng-bind などでバインドされていたとしても、それだけでは即時には反映されない。反映されるのを、次の $digest サイクルが起こるまでただ待つことになる。</p>

<p>この $digest サイクルを起こす役割が $apply である。</p>

<h2>$interval と setInterval を比較して $apply を理解する</h2>

<p>まず、AngularJS 標準 API の $interval を利用している例。これであれば 1 秒毎に日時が更新され続ける。</p>

<p><code>javascript
var update = function() {
  $scope.now = new Date();
};
update();
$interval(update, 1000);
</code></p>

<p>次に、setInterval を利用したコード。これだと 1 秒ごとには反映されない。なにかしら $digest ループが起きたタイミングで反映される。</p>

<p><code>javascript
var update = function() {
  $scope.now = new Date();
};
update();
setInterval(update, 1000);
</code></p>

<p>setInterval に $apply を付ければ、1 秒ごとに反映されるようになる。</p>

<p><code>javascript
var update = function() {
  $scope.now = new Date();
};
update();
setInterval(function() {
  $scope.$apply(update);
}, 1000);
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSのスゴ本が今だけ安い！]]></title>
    <link href="http://angularjsninja.com/blog/2013/12/20/mastering-web-application-development-with-angularjs/"/>
    <updated>2013-12-20T10:10:31+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/12/20/mastering-web-application-development-with-angularjs</id>
    <content type="html"><![CDATA[<hr />

<p><img src="https://www.packtpub.com/sites/default/files/782x300_Main_banner.jpg" alt="eBook Bonanza" /></p>

<h2>Mastering Web Application Development with AngularJS</h2>

<p>『<a href="http://www.packtpub.com/angularjs-web-application-development/book">Mastering Web Application Development with AngularJS | Packt Publishing</a>』が、Packt Publishing のサイトで年明け 1 月 3 日までたったの <strong>$ 5.00</strong> で販売中！</p>

<p>ちなみに Amazon では ￥ 1,854（2013/12/20 現在）で販売中。</p>

<p>『Mastering Web Application Development with AngularJS』は洋書だけど、AngularJS やるならこれだけは読んどけっていう、ほんとによく書かれてる本。めっちゃ勉強になってます。</p>

<p>これまでに読んだ AngularJS の本として比較できるのは O’Reilly の『AngularJS』と、Manning の『AngularJS in Action』（Early Access Edition で、まだ 6 章まで）だけど、『Mastering Web Application Development with AngularJS』が質・量ともに圧倒してる。</p>

<p>この本は、AngularJS のサンプルアプリケーション実装として GitHub で 2,274 スター（2013/12/20 現在）も付いている <a href="https://github.com/angular-app/angular-app">angular-app</a> の実装についてのパターンや技術を詳細に解説していて、実際に動作させることもできる CRUD アプリケーションで、AngularJS のフォルダ構成や modules の使い方、テスト、REST バックエンドとの接続、ナビゲーション、セキュリティ（authentication、authorization）などのベストプラクティスを学ぶことができる。</p>

<p>AngularJS やるぜって衆の年末年始は、コレで決まりだ！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[$watchと$watchの中間的な位置付けの$watchCollection]]></title>
    <link href="http://angularjsninja.com/blog/2013/12/17/angularjs-watchcollection/"/>
    <updated>2013-12-17T00:01:26+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/12/17/angularjs-watchcollection</id>
    <content type="html"><![CDATA[<hr />

<h2>$watchCollection</h2>

<p><a href="">AngularJSのデータバインドを支える$watch</a> で見たように、$watch ではオブジェクトの参照を監視するか、またはオブジェクトの中身まですべて監視（deep watch）するかを切り替えることができる。</p>

<p>その 2 種類の $watch の中間に位置付けられる <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$watchcollection">$watchCollection</a> というのもあり、1 階層分だけを監視（shallow watch）してくれる。</p>

<h2>配列の場合</h2>

<p>配列の場合に $watch、$watchCollection、および $watch (deep watch) がそれぞれどのように異なるのかを見ていく。</p>

<!-- more -->


<h3>$watch</h3>

<p><code>javascript
$scope.results = [ {...}, {...}, ... ];
$scope.$watch('results', function() {...});
</code></p>

<p>$watch の場合、参照が変更されたときだけリスナーが動作する。</p>

<p><code>javascript
results[0].title = '';  // 動かない
</code></p>

<p><code>javascript
results.push({...});  // 動かない
</code></p>

<p><code>javascript
results = [...];  // 動く
</code></p>

<h3>$watchCollection</h3>

<p><code>javascript
$scope.results = [ {...}, {...}, ... ];
$scope.$watchCollection('results', function() {...});
</code></p>

<p>$watchCollection の場合、監視している配列に追加、削除などをした場合にも動作する。</p>

<p><code>javascript
results[0].title = '';  // 動かない
</code></p>

<p><code>javascript
results.push({...});  // 動く
</code></p>

<p><code>javascript
results = [...];  // 動く
</code></p>

<h3>$watch（deep watch）</h3>

<p><code>javascript
$scope.results = [ {...}, {...}, ... ];
$scope.$watch('results', function() {...}, true);
</code></p>

<p>$watch (deep watch) の場合、なにかしらあれば動作する。</p>

<p><code>javascript
results[0].title = '';  // 動く
</code></p>

<p><code>javascript
results.push({...});  // 動く
</code></p>

<p><code>javascript
results = [...];  // 動く
</code></p>

<h2>普通のオブジェクトの場合</h2>

<p><code>javascript
$scope.user = {
  name: 'unknown',
  images: [...]
};
$scope.$watchCollection('user', function() {...});
</code></p>

<p>普通のオブジェクトを対象とした $watchCollection の動作は、監視しているオブジェクトのプロパティ値の変更や、プロパティの追加・削除でも動作する。</p>

<p><code>javascript
user.images.push(...);  // 動かない
</code></p>

<p><code>javascript
user.name = 'known';  // 動く
</code></p>

<p><code>javascript
user.newProperty = 'new prop!';  // 動く
</code></p>

<p><code>javascript
user = {...};  // 動く
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS 1.3 では IE 8 がサポートされない]]></title>
    <link href="http://angularjsninja.com/blog/2013/12/15/angularjs-1.3-discontinues-support-for-ie8/"/>
    <updated>2013-12-15T16:16:01+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/12/15/angularjs-1.3-discontinues-support-for-ie8</id>
    <content type="html"><![CDATA[<hr />

<p>AngularJS 1.3 についての記事『<a href="http://blog.angularjs.org/2013/12/angularjs-13-new-release-approaches.html">AngularJS 1.3: a new release approaches</a>』が公式ブログのほうに上がりました。</p>

<p>日本でのエンタープライズ（業務系）なんかでは、まだまだ IE 8 は当たり前のようにサポート対象のブラウザになっているところが多いと思うので、ちょっと大きなニュースですね。</p>

<p>なお、AngularJS 1.2.x 以前を IE 8 で動作させるには、過去記事『<a href="/blog/2013/09/11/angularjs-ie-compatibility/">AngularJS を古い IE に対応させるには</a>』をご参照ください。</p>

<h2>AngularJS 1.3 は IE 8 をサポートしない</h2>

<p>サポートをやめる理由としては、IE 8 で動作させるためのコードのせいで性能に悪影響があるし、すでに IE 8 ユーザは全体の数パーセント程度だし、Microsoft による Windows XP のサポートも 2014年4月に終わるし、とのこと。動作性能の向上はもちろん、機能を追加していくのも速くなると。</p>

<p>どうしても IE 8 で動作させ続けたい場合は：</p>

<ul>
<li>AngularJS 1.2.x を使い続ける</li>
<li>AngularJS 1.3 をトライする</li>
<li>IE 8 で動作する AngularJS を商用サポートとして提供する会社を見つける。</li>
</ul>


<p>1.3 バージョンでは IE 8 用のハックを積極的に削除していくことはないようで、1.2.x バージョンのアプリケーションが IE 8 で動作しているのであれば、大部分は 1.3 でも動作するのではないかということ。ただし、1.3 では IE 8 向けのテストもバグフィックスも実施しなくなると。</p>

<!-- more -->


<h2>非推奨（deprecated）の API を削除</h2>

<p><a href="https://github.com/angular/angular.js/commit/5dc35b527b3c99f6544b8cb52e93c6510d3ac577">fix($parse): deprecate promise unwrapping and make it an opt-in</a></p>

<p>promise の unwrapping についてのことを指しているようで、この API のことは以前の記事『<a href="/blog/2013/10/26/angularjs-1.2.0-rc3-promises/">AngularJS 1.2.0-rc3 以降の Promise</a>』をご参照ください。</p>

<h2>リリースバージョンの命名規約</h2>

<p>odd/even versioning から、semantic versioning に切り替えるということで、以前は 1.1.x（奇数）を開発バージョン、1.0.x や 1.2.x（偶数）を安定バージョンとしてきたバージョニングを、1.3.0-beta.1、1.3.0-beta.2 などを経て、安定版 1.3.0 リリースとするバージョニングになるということ。</p>

<h2>1.3 新機能についてコメントを！</h2>

<p>1月2日まで 1.3 での<a href="https://github.com/angular/angular.js/issues?milestone=32&amp;page=1&amp;state=open">新機能</a>についてのコメントを受け付けているようです。"+1" とコメントすれば投票したことに。</p>

<h2>1.3（ベータ）リリースはいつ頃か</h2>

<p>1.3 の最初のベータバージョンが 1 月で、その後 1 〜 2 週間間隔でリリース。</p>
]]></content>
  </entry>
  
</feed>
