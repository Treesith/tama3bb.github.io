<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AngularJS | AngularJS Ninja]]></title>
  <link href="http://angularjsninja.com/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://angularjsninja.com/"/>
  <updated>2013-09-05T19:49:39+09:00</updated>
  <id>http://angularjsninja.com/</id>
  <author>
    <name><![CDATA[Akihito Tamagawa]]></name>
    <email><![CDATA[tama3bb@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS アプリケーションを国際化するには]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/05/angularjs-i18n/"/>
    <updated>2013-09-05T19:49:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/05/angularjs-i18n</id>
    <content type="html"><![CDATA[<hr />

<p><img src="http://pascalprecht.github.io/angular-translate/docs/en/img/logo/angular-translate-alternative/angular-translate_alternative_medium2.png" alt="angular-translate" /></p>

<p>AngularJS アプリケーションを国際化するには、<a href="http://pascalprecht.github.io/angular-translate/">angular-translate</a> を使うのがとてもいい感じなので紹介。</p>

<p>簡単な特徴</p>

<ul>
<li>言語ごとにリソースファイルを分けられる</li>
<li>表示する言語のファイルだけを非同期に読み込める</li>
<li>選択言語を LocalStorage または Cookie に保存してくれる</li>
</ul>


<!-- more -->


<h1>angular-translate のインストール</h1>

<p>Bower でモジュールをインストールし、JS ファイルを適当なとこに置いて HTML から参照させて、AngularJS の依存モジュールとして記述。
<code>
$ bower install angular-translate
$ bower install angular-translate-storage-cookie
$ bower install angular-translate-storage-local
$ bower install angular-translate-loader-static-files
$ bower install angular-translate-handler-log
</code>
``` html index.html
<html>
  <head></p>

<pre><code>&lt;meta charset="utf-8"&gt;
&lt;title&gt;i18n app&lt;/title&gt;

&lt;script src="path/to/angular.min.js"&gt;&lt;/script&gt;
&lt;script src="path/to/angular-translate.min.js"&gt;&lt;/script&gt;
&lt;script src="path/to/angular-translate-storage-cookie.min.js"&gt;&lt;/script&gt;
&lt;script src="path/to/angular-translate-storage-local.min.js"&gt;&lt;/script&gt;
&lt;script src="path/to/angular-translate-loader-static-files.min.js"&gt;&lt;/script&gt;
&lt;script src="path/to/angular-translate-handler-log.min.js"&gt;&lt;/script&gt;
&lt;script src="app.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head></p>

<p>  <body ng-app="myApp"></p>

<p>  </body>
</html>
<code>
</code> javascript app.js
var app = angular.module(&lsquo;myApp&rsquo;, [&lsquo;pascalprecht.translate&rsquo;]);
```</p>

<h1>$translateProvider の設定</h1>

<p>$translateProvider を config で設定。</p>

<p>``` javascript
app.config([&lsquo;$translateProvider&rsquo;, function($translateProvider) {
  $translateProvider.useStaticFilesLoader({</p>

<pre><code>prefix: 'assets/i18n/locale-',
suffix: '.json'
</code></pre>

<p>  });
  $translateProvider.preferredLanguage(&lsquo;ja&rsquo;);
  $translateProvider.fallbackLanguage(&lsquo;en&rsquo;);
  $translateProvider.useMissingTranslationHandlerLog();
  $translateProvider.useLocalStorage();
}]);
```</p>

<ul>
<li>useStaticFilesLoader でリソースファイルのファイルパスを指定</li>
<li>preferredLanguage でデフォルトの言語キーを指定</li>
<li>fallbackLanguage で選択言語にリソースが見つからない場合の言語を指定</li>
<li>useMissingTranslationHandlerLog でキーに対応するリソースが見つからない場合に console 出力</li>
<li>useLocalStorage で選択言語の保存先として localStorage を指定（非対応ブラウザでは Cookie に保存される）</li>
</ul>


<p><code>
assets/i18n/
├── locale-en.json
└── locale-ja.json
</code>
リソースファイルは、en や ja などの言語キーの前（prefix）と後（suffix）を指定。</p>

<h1>リソースの記述方法</h1>

<p>JSON オブジェクトとして記述。ネストもできる。
``` javascript assets/i18n/locale-en.json
{
  &ldquo;HEADLINE&rdquo;: &ldquo;What an awesome module!&rdquo;,
  &ldquo;PARAGRAPH&rdquo;: &ldquo;Srsly!&rdquo;,
  &ldquo;NAMESPACE&rdquo;: {</p>

<pre><code>"PARAGRAPH": "And it comes with awesome features!"
</code></pre>

<p>  }
}
```</p>

<h1>HTML で利用するには</h1>

<p>HTML で利用する場合には、translate フィルタ、または translate ディレクティヴで。</p>

<p>``` html filters</p>

<h2>{{ 'HEADLINE' | translate }}</h2>


<p>{{ 'PARAGRAPH' | translate }}</p>


<p><code>
</code> html directives</p>

<h2 translate>HEADLINE</h2>


<p translate="PARAGRAPH"></p>


<p>```</p>

<h1>controller で利用するには</h1>

<p>controller で利用する場合には、$translate サービスで。</p>

<p><code>javascript controllers.js
app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
  $scope.headline = $translate('HEADLINE');
  $scope.paragraph = $translate('PARAGRAPH');
  $scope.namespaced_paragraph = $translate('NAMESPACE.PARAGRAPH');
}]);
</code></p>

<h1>変数を使った置換</h1>

<p>メッセージの一部を置き換えられる。</p>

<p><code>
{
  "TRANSLATION_ID": "{{username}} is logged in."
}
</code></p>

<p>``` javascript controllers.js
angular.module(&lsquo;myApp&rsquo;).controller(&lsquo;Ctrl&rsquo;, [&lsquo;$scope&rsquo;, function ($scope) {</p>

<p>  $scope.translationData = {</p>

<pre><code>username: 'PascalPrecht'
</code></pre>

<p>  };
}]);
```</p>

<p>以下のように渡す。
<code>javascript controllers.js
$translate('TRANSLATION_ID', $scope.translationData);
</code>
<code>html filters
{{ 'TRANSLATION_ID' | translate:translationData }}
</code>
<code>html directive
&lt;ANY translate="TRANSLATION_ID" translate-values=""&gt;&lt;/ANY&gt;
</code></p>

<h1>言語の切り替え</h1>

<p>言語を切り替える場合は、$translate の uses で。</p>

<p>``` javascript controllers.js
angular.module(&lsquo;myApp&rsquo;).controller(&lsquo;Ctrl&rsquo;, [&lsquo;$translate&rsquo;, &lsquo;$scope&rsquo;, function ($translate, $scope) {</p>

<p>  $scope.changeLanguage = function (langKey) {</p>

<pre><code>$translate.uses(langKey);
</code></pre>

<p>  };</p>

<p>}]);
```
こんな感じかな。</p>

<p><code>html
&lt;button ng-click="changeLanguage('ja')" translate="BUTTON_LANG_JA"&gt;&lt;/button&gt;
&lt;button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"&gt;&lt;/button&gt;
</code>
<code>javascript assets/i18n/locale-ja.json
{
  "BUTTON_LANG_JA": "日本語",
  "BUTTON_LANG_EN": "英語"
}
</code></p>

<p>たいへん便利な国際化モジュール、angular-translate の紹介でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS で HTML をエスケープさせずに出力するには]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/04/angularjs-ng-bind-html/"/>
    <updated>2013-09-04T16:49:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/04/angularjs-ng-bind-html</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS での出力手段</h2>

<p>AngularJS で単に文字列を出力するには、<code>{{expression}}</code>または<a href="http://docs.angularjs.org/api/ng.directive:ngBind"><code>ng-bind</code></a>を HTML で利用する。</p>

<p><code>html
&lt;span&gt;{{ninja.name}}&lt;/span&gt;
&lt;span ng-bind="ninja.name"&gt;&lt;/span&gt;
</code></p>

<!-- more -->


<hr />

<h2>{{expression}} が一瞬表示されてチラつく場合の対処方法</h2>

<p><code>{{expression}}</code>をエントリーポイントの index.html で利用すると、AngularJS が処理するまで<code>{{expression}}</code>がそのままページに表示され、値が切り替わるときにチラついてしまう。</p>

<p>この問題に対しては、<code>ng-bind</code>を利用するか、<a href="http://docs.angularjs.org/api/ng.directive:ngCloak"><code>ng-cloak</code></a>を以下のように利用することで解決できる。</p>

<p><code>html
&lt;span ng-cloak&gt;{{ninja.name}}&lt;/span&gt;
</code></p>

<p>なお、<a href="http://docs.angularjs.org/api/ngRoute.directive:ngView">ng-view</a> や <a href="http://docs.angularjs.org/api/ng.directive:ngInclude">ng-include</a> で挿入される断片（partial）の HTML では、このチラつく現象は発生しないため、ng-cloak の記述は不要である。</p>

<hr />

<h2>HTML をエスケープさせずに出力するには</h2>

<p>HTML をエスケープさせずに出力するには、<a href="http://docs.angularjs.org/api/ng.directive:ngBindHtml"><code>ng-bind-html</code></a>を利用する。</p>

<p><code>html
&lt;span ng-bind-html="ninja.htmlContent"&gt;&lt;/span&gt;
</code></p>

<p>この<code>ng-bind-html</code>は、別のモジュール（ngSanitize）に分かれているため、angular-sanitize.min.js を index.html で参照し、依存するモジュールとして記述する必要がある。</p>

<p>``` html index.html</p>

<script src="assets/lib/angular-1.1.5/angular-sanitize.min.js"></script>


<p><code>
</code> javascript app.js
var app = angular.module(&lsquo;app&rsquo;, [&lsquo;ngSanitize&rsquo;]);
```</p>

<hr />

<h2>サニタイズせずに出力するには</h2>

<p>出力する内容が安全であるとわかっている場合には、<a href="http://docs.angularjs.org/api/ng.$sce#trustAsHtml">$sce.trustAsHtml</a> を利用してまったくサニタイズせずに出力することができる。</p>

<p>また、バージョン 1.1 までであれば、ngSanitize モジュールを利用することなく<code>ng-bind-html-unsafe</code>を利用できる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[なぜ AngularJS を採用したのか]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/03/why-angularjs/"/>
    <updated>2013-09-03T18:15:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/03/why-angularjs</id>
    <content type="html"><![CDATA[<hr />

<h2>なぜ AngularJS を採用したのか</h2>

<p>今回は、AngularJS を採用した理由について軽くまとめておく。</p>

<p>JavaScript MVC 系のフレームワーク導入を検討することにし、もっとも普及している <a href="http://backbonejs.org">Backbone.js</a> と、双方向データバインドなど高機能な <a href="http://emberjs.com">Ember.js</a> および <a href="http://angularjs.org">AngularJS</a> を検討した。</p>

<p>それぞれのフレームワークを順に 3 週間ほどずつ学習・実装してみた結果、AngularJS を採用した。</p>

<!-- more -->


<hr />

<h2>Ember.js を採用しなかった理由</h2>

<p>まず Ember.js を 3 週間ほど別のプロジェクトで実装してみたところ、なんか難しかった…。ただの知識不足か実力不足かも…。</p>

<p>Ember.js の GUIDES ページや API ページをひととおり目を通し、Ember.js の書籍・動画・ブログなどでざっと学習したものの、簡単なところはともかく、ちょっと複雑なことをしようとすると、どう実装したらいいのかわからない…。jQuery でならとっくに終わってるぞ、と…。</p>

<p>そして挫折…。</p>

<p>いや、Ember.js は悪くないです。相性の問題というか、ごめんなさい。</p>

<hr />

<h2>Backbone.js を採用しなかった理由</h2>

<p>次に、もともと本命に考えていた Backbone.js について。実際には AngularJS の後に評価したんだけれど、先に書く。</p>

<p>本命と考えていた理由は、普及度と、jQuery を使い慣れていた自分が最もすんなり入れるかなと考えていたから。MVC を明確に分離して記述することになってコードの見通しがよくなる。ただ、コード量は減るというより少し増える印象。</p>

<p>Backbone.js については、<a href="http://underscorejs.org">Underscore.js</a> と併せて公式ページ・書籍・動画・ブログなどでざっと学習。ついでに <a href="http://marionettejs.com">Marionette.js</a> についても軽く学習。</p>

<p>Backbone.js を不採用としたのは、評価時点で、すでに AngularJS をかなり気に入っていたことが大きい。あと、自由度が高過ぎるという印象を持ったことも大きい。Ember.js や AngularJS が実現している機能を加えることは可能なもののアドオンの選択肢が多く、ベストプラクティスと言える構成がわからずにいろいろ迷いそうだなと。</p>

<hr />

<h2>AngularJS を採用した理由</h2>

<p>AngularJS をなぜ気に入ったのかと言えば、簡単なことが驚くほど簡単にできるというところ。そのとっつきのよさに驚いた。他のメンバーが入るときに敷居が低そうで、知識不足や考慮不足による問題を発生させにくそうだと思えた。</p>

<p>もちろん独自の directive を書くのは簡単ではないし、初めのころはモデルをどう宣言するのかや、HTML テンプレートをどう記述すればいいのかさえわからない始末だった。けれど、難しいところは一部のメンバーがわかってればいいので、ちょうどいいなと。</p>

<p>その後すでに数か月プロトタイプで AngularJS のコードを書いてるけど、特に困難にぶち当たることもなく、AngularJS のプロジェクトへの採用は成功しそうだなと安心している。よかったよかった。</p>

<hr />

<h2>なぜ jQuery だけじゃダメなのか</h2>

<p>ところで、jQuery だけじゃダメなのか。jQuery はクロスブラウザに対応し、コードが簡潔で可読性が高く、普及率も高い。</p>

<p>ただし、DOM（HTML の構造ツリー）操作が主用途で、ある程度の規模でシングルページアプリケーションを制作する場合には、コード量が多くなり、どのタグにどんなイベントが付いているのか複雑でわかりにくくなりやすい。</p>

<p>なので、Backbone.js 使いましょうというのが主流なんだと思う。</p>

<hr />

<h2>もしコードを比較したいなら</h2>

<p>自分の経験からも、フレームワークの選定にはいくつかのフレームワークを試用してみたほうがいいと思う。</p>

<p>そのとっかかりとして、同じ機能をそれぞれのフレームワークで実装している例 <a href="http://todomvc.com">TodoMVC</a> がある。ここで各フレームワークのコードを見れるので、雰囲気をつかんでみるといいかも。</p>

<p>私のオススメはもちろん、AngularJS ということで。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS 基礎の基礎]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/02/angularjs-basics-ngapp-ngmodel/"/>
    <updated>2013-09-02T16:39:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/02/angularjs-basics-ngapp-ngmodel</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS 基礎</h2>

<p>しばらく AngularJS の基礎的なことを中心に書いていく。</p>

<p>AngularJS の基礎として、まず <a href="http://angularjs.org/#the-basics">AngularJS のページ</a> で一番初めにあるコードから、AngularJS に関する部分を簡単に。</p>

<!-- more -->


<hr />

<div ng-app>
  <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js"></script>
  <label>Name:</label>
  <input type="text" ng-model="yourName" placeholder="Enter a name here">
  <hr>
  <h1>Hello {{yourName}}!</h1>
</div>


<hr />

<p>``` html index.html
&lt;!doctype html>
<html ng-app>
  <head></p>

<pre><code>&lt;script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.0.7/angular.min.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;div&gt;
  &lt;label&gt;Name:&lt;/label&gt;
  &lt;input type="text" ng-model="yourName" placeholder="Enter a name here"&gt;
  &lt;hr&gt;
  &lt;h1&gt;Hello {{yourName}}!&lt;/h1&gt;
&lt;/div&gt;
</code></pre>

<p>  </body>
</html>
```</p>

<ul>
<li><p><a href="http://docs.angularjs.org/api/ng.directive:ngApp"><code>ng-app</code></a></p>

<ul>
<li>AngularJS が動作する範囲を指定。</li>
<li>ページ全体とする場合は<code>&lt;html ng-app&gt;</code>とし、<code>&lt;head&gt;</code>を対象外とするなら<code>&lt;body ng-app&gt;</code>とする。</li>
<li>より限定的に、<code>&lt;div ng-app&gt;</code>でも構わない。</li>
</ul>
</li>
<li><p><a href="http://docs.angularjs.org/api/ng.directive:ngModel"><code>ng-model</code></a></p>

<ul>
<li>フォームとモデルをリンクし、どちらかでの変更を他方に反映する。</li>
<li>この例の場合はテキストボックスへの入力値が即座に yourName プロパティに反映される。</li>
</ul>
</li>
<li><p><code>{{yourName}}</code></p>

<ul>
<li>yourName プロパティの値を HTML に表示するコード。</li>
<li>yourName プロパティの変更が即座に反映される。</li>
</ul>
</li>
</ul>


<p>この例は、<a href="http://jsfiddle.net/api/post/library/pure/">jsFiddle</a> でコードを編集して試すことができる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularFire でリアルタイムアプリケーション]]></title>
    <link href="http://angularjsninja.com/blog/2013/09/01/angularfire-realtime-chat-app/"/>
    <updated>2013-09-01T00:29:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/09/01/angularfire-realtime-chat-app</id>
    <content type="html"><![CDATA[<hr />

<p><img src="http://angularfire.com/img/afire-logo.png" alt="AngularFire" /></p>

<p>Firebase の AngularJS 向け API、<a href="http://angularfire.com">AngularFire</a> のページが公開されたばかりで、ちょうどいい機会なのでリアルタイムチャットアプリケーションの実装がどれほど簡単にできるのかを見ておく。</p>

<!-- more -->


<hr />

<h2>AngularFire とは</h2>

<p><a href="http://angularfire.com">AngularFire</a> とは、Firebase による AngularJS のアプリケーションを高速に実装するためのサービスで、バックエンドのコードを書く必要も、サーバをセットアップする必要も無く、ただフロントエンドの実装に集中できる。</p>

<p>AngularFire の API を利用することで、AngularJS のモデルが自動的に同期（保存・更新）される。AngularJS の強みの 1 つである 2-way データバインドを、サーバ側にまで拡張する 3-way データバインドと言える。</p>

<hr />

<h2>Firebase とは</h2>

<p><a href="https://www.firebase.com">Firebase</a> とは、サーバ管理不要で、高速・スケーラブル・リアルタイムなバックエンドを提供するサービス。一定の転送量・接続数・容量まで無料で、クレジッドカード無しで始めることができる。</p>

<hr />

<h2>概要</h2>

<p>Firebase の URL とモデルを関連付けすることで、アプリケーションを利用しているすべてのクライアント（ブラウザ）を同期させる。</p>

<p>まず、<code>firebase.js</code>と<code>angularfire.js</code>を参照。</p>

<p>``` html</p>

<script src="https://cdn.firebase.com/v0/firebase.js"></script>


<script src="https://cdn.firebase.com/libs/angularfire/0.3.0/angularfire.js"></script>


<p>```</p>

<p>AngularJS の app モジュールが依存するモジュールとして、<code>firebase</code>を記述。</p>

<p><code>javascript
var myapp = angular.module('myapp', ['firebase']);
</code></p>

<hr />

<h2>同期</h2>

<p>Firebase とモデルを同期化させるコード。すべてのローカルでの変更が自動的に Firebase に送信され、すべてのリモートでの変更が即座にローカルのモデルに反映される。</p>

<p><code>angularFire</code>を controller が依存するサービスとして記述。</p>

<p>``` javascript
myapp.controller(&lsquo;MyCtrl&rsquo;, [&lsquo;$scope&rsquo;, &lsquo;angularFire&rsquo;,
  function MyCtrl($scope, angularFire) {</p>

<pre><code>...
</code></pre>

<p>  }
]);
```</p>

<p>Firebase の参照を、<code>$scope</code>のモデルにバインド。</p>

<p><code>javascript
var ref = new Firebase('https://&lt;my-firebase&gt;.firebaseio.com/items');
angularFire(ref, $scope, 'items');
</code></p>

<p>マークアップで普通にモデルを利用。</p>

<p>``` html</p>

<ul ng-controller="MyCtrl">
  <li ng-repeat="item in items">: </li>
</ul>


<p>```</p>

<p>Firebase からのデータは非同期にロードされ、サーバからのデータロードの通知には promise が利用できる。ローカルで実施したモデルへの変更は、AngularFire が自動的にリモートのデータとマージする。</p>

<p>モデルのデータ変更についても普通に実装。</p>

<p><code>javascript
// モデルに直接新しいアイテムを追加
$scope.items.push({name: "Firebase", desc: "is awesome!"});
// $scope に function を定義し、directive からのモデル操作も可
$scope.removeItem = function() {
  $scope.items.splice($scope.toRemove, 1);
  $scope.toRemove = null;
};
</code>
なお、同期のタイミングを制御する API も用意されている。詳しくは、AngularFire の Documentation ページで <a href="http://angularfire.com/documentation.html#explicit">Explicit Data Binding</a> を参照。</p>

<hr />

<h1>まとめ</h1>

<p>AngularFire の<a href="http://angularfire.com">トップページ</a>にチャットアプリケーションを実装した 30 行のコードが掲載されている。また、そこでチャットアプリケーションのデモを確認できる。</p>

<p>たったこれだけの簡単なコードで、AngularJS のモデルをサーバに同期させ、すべてのクライアントに即座に同期させるリアルタイムアプリケーションを実装することができる。</p>

<p>AngularJS の勉強会をするなら、ハンズオンの題材としてちょうどよさそう。</p>
]]></content>
  </entry>
  
</feed>
