<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AngularJS | AngularJS Ninja]]></title>
  <link href="http://angularjsninja.com/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://angularjsninja.com/"/>
  <updated>2013-12-15T16:59:53+09:00</updated>
  <id>http://angularjsninja.com/</id>
  <author>
    <name><![CDATA[Akihito Tamagawa]]></name>
    <email><![CDATA[tama3bb@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS 1.3 では IE 8 がサポートされない]]></title>
    <link href="http://angularjsninja.com/blog/2013/12/15/angularjs-1.3-discontinues-support-for-ie8/"/>
    <updated>2013-12-15T16:16:01+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/12/15/angularjs-1.3-discontinues-support-for-ie8</id>
    <content type="html"><![CDATA[<hr />

<p>AngularJS 1.3 についての記事『<a href="http://blog.angularjs.org/2013/12/angularjs-13-new-release-approaches.html">AngularJS 1.3: a new release approaches</a>』が公式ブログのほうに上がりました。</p>

<p>日本でのエンタープライズ（業務系）なんかでは、まだまだ IE 8 は当たり前のようにサポート対象のブラウザになっているところが多いと思うので、ちょっと大きなニュースですね。</p>

<p>なお、AngularJS 1.2.x 以前を IE 8 で動作させるには、過去記事『<a href="/blog/2013/09/11/angularjs-ie-compatibility/">AngularJS を古い IE に対応させるには</a>』をご参照ください。</p>

<h2>AngularJS 1.3 は IE 8 をサポートしない</h2>

<p>サポートをやめる理由としては、IE 8 で動作させるためのコードのせいで性能に悪影響があるし、すでに IE 8 ユーザは全体の数パーセント程度だし、Microsoft による Windows XP のサポートも 2014年4月に終わるし、とのこと。動作性能の向上はもちろん、機能を追加していくのも速くなると。</p>

<p>どうしても IE 8 で動作させ続けたい場合は：</p>

<ul>
<li>AngularJS 1.2.x を使い続ける</li>
<li>AngularJS 1.3 をトライする</li>
<li>IE 8 で動作する AngularJS を商用サポートとして提供する会社を見つける。</li>
</ul>


<p>1.3 バージョンでは IE 8 用のハックを積極的に削除していくことはないようで、1.2.x バージョンのアプリケーションが IE 8 で動作しているのであれば、大部分は 1.3 でも動作するのではないかということ。ただし、1.3 では IE 8 向けのテストもバグフィックスも実施しなくなると。</p>

<!-- more -->


<h2>非推奨（deprecated）の API を削除</h2>

<p><a href="https://github.com/angular/angular.js/commit/5dc35b527b3c99f6544b8cb52e93c6510d3ac577">fix($parse): deprecate promise unwrapping and make it an opt-in</a></p>

<p>promise の unwrapping についてのことを指しているようで、この API のことは以前の記事『<a href="/blog/2013/10/26/angularjs-1.2.0-rc3-promises/">AngularJS 1.2.0-rc3 以降の Promise</a>』をご参照ください。</p>

<h2>リリースバージョンの命名規約</h2>

<p>odd/even versioning から、semantic versioning に切り替えるということで、以前は 1.1.x（奇数）を開発バージョン、1.0.x や 1.2.x（偶数）を安定バージョンとしてきたバージョニングを、1.3.0-beta.1、1.3.0-beta.2 などを経て、安定版 1.3.0 リリースとするバージョニングになるということ。</p>

<h2>1.3 新機能についてコメントを！</h2>

<p>1月2日まで 1.3 での<a href="https://github.com/angular/angular.js/issues?milestone=32&amp;page=1&amp;state=open">新機能</a>についてのコメントを受け付けているようです。"+1" とコメントすれば投票したことに。</p>

<h2>1.3（ベータ）リリースはいつ頃か</h2>

<p>1.3 の最初のベータバージョンが 1 月で、その後 1 〜 2 週間間隔でリリース。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS のデータバインドを支える $watch]]></title>
    <link href="http://angularjsninja.com/blog/2013/12/13/angularjs-watch/"/>
    <updated>2013-12-13T18:43:39+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/12/13/angularjs-watch</id>
    <content type="html"><![CDATA[<hr />

<h2>$watch</h2>

<p>AngularJS の強力なデータバインドを支える仕組みのうち、まず <a href="http://docs.angularjs.org/api/ng.$rootScope.Scope#methods_$watch">$watch</a> について取り上げる。</p>

<p>$watch を使えば、監視（Observe）したいオブジェクトやプロパティが変化したときに実行する処理（リスナー）を容易に記述できる。</p>

<p>$watch を利用する場所は scope のある directive や controller で、ng-model や ng-bind のようなデータバインドする directive を独自に実装する場合や、モデルの変更に応じて処理をバインドする場合などに使用できる。</p>

<h2>$digest サイクル</h2>

<p>$watch による変更検知処理は、ポーリング的（一定間隔で頻繁）に実施されるのではなく、以下のイベントが生じたときに $digest サイクル（または $digest ループ）と呼ばれる処理が実行され、その中で実行される。</p>

<table>
<thead>
<tr>
<th>イベント </th>
<th> 概要</th>
</tr>
</thead>
<tbody>
<tr>
<td>ナビゲーション </td>
<td> ブラウザの location 変更時</td>
</tr>
<tr>
<td>ネットワーク </td>
<td> $http, $resource レスポンス受信時</td>
</tr>
<tr>
<td>DOM イベント </td>
<td> ng-click, ng-mouseover などの実行時</td>
</tr>
<tr>
<td>タイマー </td>
<td> $timeout によるタイマー処理の実行時</td>
</tr>
</tbody>
</table>


<!-- more -->


<h2>構文</h2>

<p><code>$watch(watchExpression, listener, objectEquality)</code></p>

<h3>watchExpression</h3>

<p>監視したいオブジェクトや値（を返す function）を第 1 引数に指定する。</p>

<p><code>javascript
$scope.$watch(function() {
  return $location.path();
}, function() {
  // $location の path が変わった時
});
</code></p>

<p>scope にあるオブジェクトや値であれば、文字列で指定できる。</p>

<p><code>javascript
$scope.name = 'unknown';
$scope.$watch('name', function() {
  // scope の name が変わった時
});
</code></p>

<h3>listener</h3>

<p>watchExpression で監視しているオブジェクトや値が変化したときに実行するリスナー function を第 2 引数に指定する。</p>

<p>変更後の値だけでなく、変更前の値を参照することもできる。</p>

<p><code>javascript
$scope.name = 'unknown';
$scope.$watch('name', function(newVal, oldVal) {
  // newVal: 変更後の値: 'Hanzo'
  // oldVal: 変更前の値: 'unknown'
});
$scope.name = 'Hanzo';
</code></p>

<p>なお、このリスナー function についても、scope に定義があれば文字列で指定できる。</p>

<h3>objectEquality</h3>

<p>ここまでのコード例では、すべて $watch の対象となる watchExpression が文字列であったため、変更が常に検知される。</p>

<p>watchExpression がオブジェクトの場合には注意が必要で、この第 3 引数を省略（または false を指定）している場合は reference（同じオブジェクトを参照しているか）で比較されることとなり、オブジェクトのプロパティ値が変わろうと配列の中身が変わろうと、変化したとは扱われない。</p>

<p>このオブジェクト id での比較のほうが高速に処理されるが、どうしてもオブジェクトをプロパティごとに比較したい場合には、第 3 引数 objectEquality に true を指定する。性能の点では不利になるが、オブジェクトや配列の中身が変更されたかを検知できるようになる。</p>

<p>なお、性能だけでなく、新旧比較のためにオブジェクトや配列全体のコピー（angular.copy）を保持することになり、メモリ消費の点でも不利になる。</p>

<p><code>javascript
$scope.user = {
  name: 'unknown',
  gender: 'male'
  …
};
$scope.$watch('user', function(newVal, oldVal) {
  // newVal: user オブジェクト
  // オブジェクトの参照が変わった時、または オブジェクトのいずれかのプロパティが変わった時
  if (newVal) {  // オブジェクトの場合は undefined チェックを
  }
}, true);  // 性能、メモリ消費の点からできるだけ true を指定しない方法を検討すべき
</code></p>

<p>単にオブジェクトが持つ特定のプロパティを監視したいだけであれば、以下のように記述しよう。</p>

<p><code>javascript
$scope.$watch('user.name', function(newVal, oldVal) {
  // newVal: user オブジェクト
  // オブジェクトの name プロパティが変わった時
});
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSのHTMLバインド  ではundefinedを気にしない]]></title>
    <link href="http://angularjsninja.com/blog/2013/12/10/angularjs-expressions-forgiving/"/>
    <updated>2013-12-10T02:09:47+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/12/10/angularjs-expressions-forgiving</id>
    <content type="html"><![CDATA[<hr />

<h2>Forgiving</h2>

<p><a href="http://docs.angularjs.org/guide/expression">AngularJS: Expressions</a> ページで <a href="http://docs.angularjs.org/guide/expression#property-evaluation_forgiving">Forgiving</a> として説明されているように、HTML（テンプレート）で記述する AngularJS のバインド部分（<code>{{ result.title.value }}</code> や<code>ng-if=“result.tags.length”</code>）では、result、title、tags が、undefined や null でないかや object かどうかということを考慮したコードにしなくていい。</p>

<p>result が通信してサーバから取得するデータであれば、レスポンスが返るまでの間 result は undefined の状態になるけど、だからと言って<code>{{ ((result || {}).title || {}).c }}</code>とか、<code>result &amp;&amp; result.title &amp;&amp; result.title.value</code>のようにコーディングしなくていい。</p>

<!-- more -->


<h2>サンプル</h2>

<p>以下のサンプルでは、<code>ng-hide="result.hidden"</code>のとこで、result なんて定義してないので undefined だけど、エラーにならずに falsy として扱われている。</p>

<p><a class="jsbin-embed" href="http://jsbin.com/oTOMaFIJ/11/embed?html,output">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSでちゃちゃっとアニメーションを試す]]></title>
    <link href="http://angularjsninja.com/blog/2013/12/08/angularjs-nganimate/"/>
    <updated>2013-12-08T00:20:54+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/12/08/angularjs-nganimate</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS 1.2.4</h2>

<p>AngularJS 1.2.4 がリリースされ、$animate 関連の <a href="https://github.com/angular/angular.js/blob/master/CHANGELOG.md#1.2.4">Bug Fixes</a> が入り ng-include をネストした ng-repeat でアニメーションが効かない問題も解消されたので、アニメーションをちゃちゃっと試す方法を紹介。</p>

<h2>angular-animate.js</h2>

<p>HTML に angular と angular-animate の js ファイルを記述する。</p>

<p>``` html</p>

<p><script src="angular.min.js">
<script src="angular-animate.min.js">
```</p>

<h2>ngAnimate モジュール</h2>

<p>依存モジュールとして <code>ngAnimate</code> を記述する。</p>

<p><code>javascript
angular.module('app', [ 'ngAnimate' ])
</code></p>

<h2>CSS 定義</h2>

<p>これだけでもうゴール間近で、あとはどんなアニメーションを適用するのかを考えて定義するだけ。</p>

<p>アニメーションを CSS で定義する方法と JavaScript で記述する方法があり、ここではちゃちゃっと試すのが簡単な CSS を例示する。</p>

<p><!-- more --></p>

<p><code>css
.ng-enter,
.ng-leave,
.ng-move {
  -webkit-transition: opacity 0.15s linear;
  transition: opacity 0.15s linear;
}
.ng-enter {
  opacity: 0;
}
.ng-enter.ng-enter-active {
  opacity: 1;
}
.ng-leave {
  opacity: 1;
}
.ng-leave.ng-leave-active {
  opacity: 0;
}
.ng-move {
  opacity: .5;
}
.ng-move.ng-move-active {
  opacity: 1;
}
</code></p>

<p>この CSS 定義だけで、<code>enter</code> <code>leave</code> <code>move</code>系の<code>ngRepeat</code> <code>ngView</code> <code>ngInclude</code> <code>ngSwitch</code> <code>ngIf</code> directives に fade（フェード）のアニメーションが適用される。</p>

<h2>アニメーションを限定的に適用</h2>

<p>ちゃちゃっとアニメーションを試してみるのにはさっきの CSS で OK だけど、アニメーションされすぎで気持ち悪いとか、アニメーションのせいでむしろ遅い UI に感じられるとか、テーブルタグなどで不自然なレンダリングになるとか…。</p>

<p>なので、ちゃんとアニメーションを使うときには CSS のセレクタに class name（以下では animated）を追加し、適用箇所を限定する。</p>

<p><code>css
.animated.ng-enter,
.animated.ng-leave,
.animated.ng-move {
  -webkit-transition: opacity 0.15s linear;
  transition: opacity 0.15s linear;
}
.animated.ng-enter {
  opacity: 0;
}
.animated.ng-enter.ng-enter-active {
  opacity: 1;
}
.animated.ng-leave {
  opacity: 1;
}
.animated.ng-leave.ng-leave-active {
  opacity: 0;
}
.animated.ng-move {
  opacity: .5;
}
.animated.ng-move.ng-move-active {
  opacity: 1;
}
</code></p>

<p>そして、HTML 側でアニメーションさせたい<code>ng-if</code>や<code>ng-repeat</code>を指定した要素の class 属性に <code>animated</code> を追記する。</p>

<p><code>html
&lt;div ng-if="model.visible" class="animated"&gt;...&lt;/div&gt;
</code></p>

<p>むやみやたらにアニメーションするのでなく、こうしてポイントポイントで上品に適用していくことを心掛けよう。</p>

<h2>サンプル</h2>

<p>
<a class="jsbin-embed" href="http://jsbin.com/EpiHEwuK/26/embed?output">JS Bin</a><script src="http://static.jsbin.com/js/embed.js"></script>
</p>

<h2>class 属性の変化</h2>

<p>class 属性が変化する流れを見ておく。</p>

<p><code>model.visible = false;</code>（非表示状態）のときがこのようなコードだとして、</p>

<p><code>html
&lt;div ng-if="model.visible" class="animated"&gt;...&lt;/div&gt;
</code></p>

<p><code>model.visible = true;</code>（表示に切替）になるとまず<code>ng-enter</code>が追加（<code>opacity: 0;</code>）されて、</p>

<p><code>html
&lt;div ng-if="model.visible" class="animated ng-enter"&gt;...&lt;/div&gt;
</code></p>

<p>その後すぐに<code>ng-enter-active</code>が追加（<code>opacity: 1;</code>）されることでアニメーションが開始する。CSS で定義している <code>transition: opacity 0.15s linear;</code>により 0.15s の速度でフェードしながら表示（fadeIn）され、</p>

<p><code>html
&lt;div ng-if="model.visible" class="animated ng-enter ng-enter-active"&gt;...&lt;/div&gt;
</code></p>

<p>要素の class 属性は元に戻る。</p>

<p><code>html
&lt;div ng-if="model.visible" class="animated"&gt;...&lt;/div&gt;
</code></p>

<p>その逆で表示から非表示になるときには、<code>ng-enter</code>の代わりに<code>ng-leave</code>と<code>ng-leave-active</code>が class 属性に追加される。</p>

<h2>アニメーションに対応する標準 directive</h2>

<p>以下の AngularJS 標準 directive には、アニメーションのための処理が実装されているので、表示・非表示が切り替わるタイミングで class 属性に先述したような値（<code>ng-enter</code>など）が反映される。</p>

<table>
<thead>
<tr>
<th>Directive </th>
<th> Supported Animations</th>
</tr>
</thead>
<tbody>
<tr>
<td>ngRepeat </td>
<td> enter, leave, move</td>
</tr>
<tr>
<td>ngView </td>
<td> enter, leave</td>
</tr>
<tr>
<td>ngInclude </td>
<td> enter, leave</td>
</tr>
<tr>
<td>ngSwitch </td>
<td> enter, leave</td>
</tr>
<tr>
<td>ngIf </td>
<td> enter, leave</td>
</tr>
<tr>
<td>ngClass </td>
<td> add, remove</td>
</tr>
<tr>
<td>ngShow / ngHide </td>
<td> add, remove (ng-hide class 値)</td>
</tr>
</tbody>
</table>


<p>もちろんカスタム directive でも $animate service を利用して標準 directive と同じようにアニメーションを実現できるけど、その方法についてはまた別の機会に。</p>

<h2>ngAnimate-animate.css</h2>

<p>最後に、<a href="https://daneden.me/animate/">animate.css</a> を AngularJS 1.2 で利用できるようにするドライバーモジュール <a href="https://github.com/yearofmoo/ngAnimate-animate.css">ngAnimate-animate.css</a> を紹介。</p>

<p>animate.css とこのモジュールを使えば、class 属性に <code>dn-fade</code> と記述するだけでフェードのアニメーションを利用できるようになる。その他いろいろなアニメーションも class 属性に指定するだけで試せる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ObjectでもArrayでも回せるangular.forEach]]></title>
    <link href="http://angularjsninja.com/blog/2013/12/06/angular-foreach/"/>
    <updated>2013-12-06T13:55:45+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/12/06/angular-foreach</id>
    <content type="html"><![CDATA[<hr />

<h2>angular.forEach</h2>

<p>AngularJS 標準の <a href="http://docs.angularjs.org/api/ng#function">Global API</a> から、<a href="http://docs.angularjs.org/api/angular.forEach">angular.forEach</a> の紹介。</p>

<p>angular.forEach は、Object でも Array でも回してくれる。</p>

<h2>angular.forEach(Object, Function)</h2>

<p><code>javascript
var user = { name: 'ninja', gender: 'unknown', weapons: [ ..., ... ] };
angular.forEach(user, function(value, key) {
  // ...
});
</code></p>

<p>オブジェクトを回す場合の Iterator function の引数は value, key の順。</p>

<h2>angular.forEach(Array, Function)</h2>

<p><code>javascript
var records = [ { ... }, { ... } ];
angular.forEach(records, function(record, i) {
  // ...
});
</code></p>

<p>配列を回す場合の Iterator function は第１引数が配列の中身で、第２引数が配列インデックスとなる。</p>

<!-- more -->


<h2>context の指定</h2>

<p>第３引数に Iteration function での context (this) を指定できる。</p>

<p>以下、公式サイトの <a href="http://docs.angularjs.org/api/angular.forEach">angular.forEach</a> ページに掲載されているコード。</p>

<p><code>javascript
var values = {name: 'misko', gender: 'male'};
var log = [];
angular.forEach(values, function(value, key) {
  this.push(key + ': ' + value);
}, log);
</code></p>

<p>この例だと、第３引数（context）に<code>log</code>を渡していて、この<code>log</code>が iterator の中での context <code>this</code>となる。</p>
]]></content>
  </entry>
  
</feed>
