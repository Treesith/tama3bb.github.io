<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AngularJS | AngularJS Ninja]]></title>
  <link href="http://angularjsninja.com/blog/categories/angularjs/atom.xml" rel="self"/>
  <link href="http://angularjsninja.com/"/>
  <updated>2013-11-09T10:14:32+09:00</updated>
  <id>http://angularjsninja.com/</id>
  <author>
    <name><![CDATA[Akihito Tamagawa]]></name>
    <email><![CDATA[tama3bb@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS 1.2.0 リリース！]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/09/angularjs-1.2.0-timely-delivery/"/>
    <updated>2013-11-09T10:14:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/09/angularjs-1.2.0-timely-delivery</id>
    <content type="html"><![CDATA[<hr />

<p>待望の AngularJS 1.2.0 リリースがキター！！</p>

<p>まだ把握してない内容もあるんだけど、取り急ぎ公式ブログの<a href="http://blog.angularjs.org/2013/11/angularjs-120-timely-delivery.html">内容</a>を（一部省略して）日本語に訳しときます。</p>

<hr />

<h2>AngularJS 1.2.0: timely-delivery</h2>

<p>1.2.0-rc3 で見つかった多くの問題を修正しているのと、前回の安定版リリースからいくつもの新しい機能を導入しているとのこと。</p>

<p>前回の安定版リリースからの注目すべき変更点としては：</p>

<ul>
<li><a href="http://www.yearofmoo.com/2013/08/remastered-animation-in-angularjs-1-2.html">アニメーションとトランジション</a></li>
<li><a href="http://kensheedlo.com/2013/08/15/error-message-minification-with-minerr.html">エラーメッセージ</a>（error minification を含む）</li>
<li><a href="http://docs.angularjs.org/api/ng.$sce">厳密なコンテキストのエスケーピング</a></li>
<li><a href="http://docs.angularjs.org/api/ng.directive:ngRepeat">ng-repeat で重複を防ぐトラッキング機能</a></li>
<li><a href="http://egghead.io/lessons/angularjs-experimental-controller-as-syntax">テンプレート内で controller インスタンスにアクセスするための構文</a></li>
<li><a href="https://github.com/angular/angular.js/pull/3699">Promise A+ に準拠</a></li>
<li><a href="http://docs.angularjs.org/api/ngRoute">ngRoute を独自モジュールに分離</a></li>
</ul>


<p>リリースの詳細は、<a href="https://github.com/angular/angular.js/blob/master/CHANGELOG.md">changelog</a> を参照。</p>

<p>移行ガイドは <a href="http://docs.angularjs.org/guide/migration">our guides</a> を参照。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSでカスタムfilterを書いてみよう]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/09/angularjs-filter/"/>
    <updated>2013-11-09T00:01:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/09/angularjs-filter</id>
    <content type="html"><![CDATA[<hr />

<h2>filter とは</h2>

<p>filter は、表示用に値を加工してくれる機能。HTML テンプレートだけでなく、controller や service でも利用できる。また、独自の filter を簡単に定義することもできる。</p>

<p>構文から利用例、そしてカスタム filter のサンプルコードを紹介！</p>

<!-- more -->


<h2>filter の構文</h2>

<p>こんなふうに、パイプ記号を使う構文で記述。
<code>
{{ expression | filter }}
</code>
チェーン（chaining）することもできるし、
<code>
{{ expression | filter1 | filter2 }}
</code>
引数を取ることもできる。
<code>
{{ expression | filter:arg1:arg2 }}
</code></p>

<h2>filter の利用例</h2>

<p>たとえば数値をカンマ区切りで表示したければ、AngularJS 標準の <a href="http://docs.angularjs.org/api/ng.filter:number">number</a> filter を使うだけでラクチン。</p>

<p><code>
{{ 123456789 | number }}
</code>
123,456,789</p>

<p>標準の filter については、AngularJS <a href="http://docs.angularjs.org/api/ng#filter">公式サイト</a>のほうで。<a href="http://docs.angularjs.org/api/ng.filter:filter">filter</a> filter はかなり使えるので要チェック！</p>

<h2>カスタム filter を実装してみる</h2>

<p>例として、全角英数字が混じってて見苦しいデータがあったとして、せめて表示の段階ででもスッキリと半角英数字に揃えて表示したいなーということを実現する filter のサンプルコードを。</p>

<p>
``` javascript</p>

<script src="http://code.angularjs.org/1.2.0-rc.3/angular.min.js"></script>


<script>
angular.module('Ninja', [])
.filter('oneByte', function() {
  return function(input) {
    return input.replace(/[Ａ-Ｚａ-ｚ０-９]/g, function(s) {
      return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
    });
  };
});
</script>


<div ng-app="Ninja">
  {{ val | oneByte }}<br>
  <input type="text" ng-model="val" ng-init="val='Ａｎｇｕｌａｒｊｓ Ninja'">  
</div>


<p>```
</p>

<script src="http://code.angularjs.org/1.2.0-rc.3/angular.min.js"></script>


<script>
angular.module('Ninja', [])
.filter('oneByte', function() {
  return function(input) {
    return input.replace(/[Ａ-Ｚａ-ｚ０-９]/g, function(s) {
      return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
    });
  };
});
</script>


<div ng-app="Ninja">
  {{ val | oneByte }}<br>
  <input type="text" ng-model="val" ng-init="val='Ａｎｇｕｌａｒｊｓ Ninja'">
</div>


<p>いやー、filter 楽しい。でも filter はパフォーマンス的にアレなので、使いすぎにご注意を。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJSのng-listが便利なようで便利でなく、でもやっぱり便利]]></title>
    <link href="http://angularjsninja.com/blog/2013/11/08/angularjs-nglist/"/>
    <updated>2013-11-08T01:16:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/11/08/angularjs-nglist</id>
    <content type="html"><![CDATA[<hr />

<h2>ngList とは</h2>

<p><a href="http://docs.angularjs.org/api/ng.directive:ngList">ngList</a> は、テキストボックスに入力された区切り文字列と、文字列配列のモデルとを相互に変換してくれる directive です。</p>

<p>区切り文字（delimiter）のデフォルトはカンマですが、別の文字列や、正規表現も使えます。</p>

<p>うん、なんだか便利な感じ！</p>

<!-- more -->


<h2>さっそく使ってみたけど、便利じゃない…</h2>

<ul>
<li>配列に文字列を追加・削除してもテキストボックスの表示変わらんやん…</li>
<li>正規表現はおろか、何を指定してもカンマとして動いてくれちゃうやん…</li>
</ul>


<p>なんだろう、あきらかに不具合だよ、これは。</p>

<p>てことで、いつものように Stack Overflow に頼る。</p>

<p><a href="http://stackoverflow.com/questions/15590140/ng-list-input-not-updating-when-adding-items-to-array">javascript &ndash; ng-list input not updating when adding items to array &ndash; Stack Overflow</a></p>

<p><blockquote><p>Formatters are only invoked if the value is strictly not equal to the previous value, but since it is the same array instance in your first example, that statement evaluates to false, and hence the text field isn&rsquo;t updated.</p></blockquote></p>

<p>配列の中身が変わっても知らんしって実装になってるから更新されへんねんでってことね。</p>

<h2>でもやっぱり便利だから使えるようにしたい</h2>

<p>AngularJS 本体のコードを修正して Pull Req&hellip;。いやいや、敷居が高い。</p>

<p>とりあえずの対応としては、配列に文字列を追加・削除するたびに配列を新しくしちゃえば動く。</p>

<h2>デモとサンプルコード</h2>

<hr />

<div ng-app>
  <script src="http://codeorigin.jquery.com/jquery-2.0.3.min.js"></script>
  <script src="http://code.angularjs.org/1.2.0-rc.3/angular.min.js"></script>  
  <script>
    function TagCtrl($scope) {
      $scope.tags = [];
      $scope.select = function(tag) {
        if ($scope.contains(tag, $scope.tags)) {
          var tags = [];
          angular.forEach($scope.tags, function(t) {
            if (tag != t) {
              tags.push(t);
            }
          });
          $scope.tags = tags;
        } else {
          $scope.tags = angular.copy($scope.tags);
          $scope.tags.push(tag);
        }
      };
      $scope.contains = function(value, array) {
        return 0 <= $.inArray(value, array);
      };
    }
  </script>
  <div ng-controller="TagCtrl">
    <input type="text" ng-model="tags" ng-list><br>
    <a href="" ng-click="select('Red')">Red</a>    
    <a href="" ng-click="select('Orange')">Orange</a>
    <a href="" ng-click="select('Yellow')">Yellow</a>
    <a href="" ng-click="select('Green')">Green</a>
    <a href="" ng-click="select('Blue')">Blue</a>
    <a href="" ng-click="select('Purple')">Purple</a>
    <a href="" ng-click="select('Gray')">Gray</a>
  </div>
</div>


<hr />

<p>``` html</p>

<div ng-app>
  <script src="http://codeorigin.jquery.com/jquery-2.0.3.min.js"></script>
  <script src="http://code.angularjs.org/1.2.0-rc.3/angular.min.js"></script>  
  <script>
    function TagCtrl($scope) {
      $scope.tags = [];
      $scope.select = function(tag) {
        if ($scope.contains(tag, $scope.tags)) {
          var tags = [];
          angular.forEach($scope.tags, function(t) {
            if (tag != t) {
              tags.push(t);
            }
          });
          $scope.tags = tags;
        } else {
          $scope.tags = angular.copy($scope.tags);
          $scope.tags.push(tag);
        }
      };
      $scope.contains = function(value, array) {
        return 0 <= $.inArray(value, array);
      };
    }
  </script>
  <div ng-controller="TagCtrl">
    <input type="text" ng-model="tags" ng-list><br>
    <a href="" ng-click="select('Red')">Red</a>    
    <a href="" ng-click="select('Orange')">Orange</a>
    <a href="" ng-click="select('Yellow')">Yellow</a>
    <a href="" ng-click="select('Green')">Green</a>
    <a href="" ng-click="select('Blue')">Blue</a>
    <a href="" ng-click="select('Purple')">Purple</a>
    <a href="" ng-click="select('Gray')">Gray</a>
  </div>
</div>


<p>```</p>

<h2>区切り文字の変更は？</h2>

<p>まあ、とりあえずカンマ区切りでヨシということで。ここの <a href="https://github.com/angular/angular.js/blob/v1.2.0-rc.3/src/ng/directive/input.js#L1381">value.join(&lsquo;, &rsquo;)</a> がおかしいんだろうと思いつつも、必要になるまで置いとこう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS 1.2.0-rc3 以降の Promise]]></title>
    <link href="http://angularjsninja.com/blog/2013/10/26/angularjs-1.2.0-rc3-promises/"/>
    <updated>2013-10-26T14:15:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/10/26/angularjs-1.2.0-rc3-promises</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS 1.2.0-rc3 以降、Promise の扱いに注意</h2>

<p>rc2 までと異なり、promise の自動アンラップ（auto unwrapping）がデフォルトで無効となり、promise を直接 $scope の変数に突っ込んでたりするとうまく動かなくなる。</p>

<p>rc2 までは、promise がリターンされるとき、こんなふうに書けた。
<code>javascript controllers.js
$scope.values = NinjaService.getValues();
</code></p>

<p>rc3 からは、こう書かないと動かない。
<code>javascript controllers.js
NinjaService.getValues().then(function(values) {
  $scope.values = values;
});
</code></p>

<p>自動アンラップを採用しなくした理由は、この Issue でのやり取りに詳しく書かれている。</p>

<p><a href="https://github.com/angular/angular.js/issues/4158">Automatic unwrapping of promises by $parse severely limits its usefulness · Issue #4158 · angular/angular.js</a></p>

<p>この変更によって、前回のエントリーで書いた Angular UI の Typeahead も動作するようになったということ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS 1.2.0-rc2 で Typeahead が動かない]]></title>
    <link href="http://angularjsninja.com/blog/2013/10/19/angularjs-1.2.0-rc2-typeahead/"/>
    <updated>2013-10-19T17:42:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/10/19/angularjs-1.2.0-rc2-typeahead</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS で UI Bootstrap の Typeahead が動かない</h2>

<p>AngularJS 1.2.0 の rc2 にした途端、UI Bootstrap (0.6.0) の Typeahead (Autocomplete みたいなやつ) が動かなくなった。</p>

<p>仕様変更なのかバグなのかわからず、とりあえず<code>ui-bootstrap-tpls-0.6.0.js</code>のコードを見たりしながらも AngularJS か UI Bootstrap のほうでバグ修正してくんないかなーと期待＆様子見していたところ、AngularJS 1.2.0 の rc3 では正常に動作するようになったので一件落着。</p>

<p>ちなみに、rc2 でのエラーは、<code>matches is undefined</code>というもの。</p>

<p>Stack Overflow で関連する記事は、<a href="http://stackoverflow.com/questions/18764023/angularjs-1-2-0-bootstrap-ui-0-6-0-bootstrap3-bis2-typeahead/19377002#19377002">AngularJS 1.2.0 Bootstrap UI 0.6.0 (bootstrap3_bis2) Typeahead</a> かな。rc2 では、<code>promise</code>絡みの実装に問題があったみたいだ。</p>
]]></content>
  </entry>
  
</feed>
