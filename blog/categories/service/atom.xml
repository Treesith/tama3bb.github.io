<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: service | AngularJS Ninja]]></title>
  <link href="http://angularjsninja.com/blog/categories/service/atom.xml" rel="self"/>
  <link href="http://angularjsninja.com/"/>
  <updated>2013-11-16T02:18:58+09:00</updated>
  <id>http://angularjsninja.com/</id>
  <author>
    <name><![CDATA[Akihito Tamagawa]]></name>
    <email><![CDATA[tama3bb@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS 1.2.0-rc3 以降の Promise]]></title>
    <link href="http://angularjsninja.com/blog/2013/10/26/angularjs-1.2.0-rc3-promises/"/>
    <updated>2013-10-26T14:15:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/10/26/angularjs-1.2.0-rc3-promises</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS 1.2.0-rc3 以降、Promise の扱いに注意</h2>

<p>rc2 までと異なり、promise の自動アンラップ（auto unwrapping）がデフォルトで無効となり、promise を直接 $scope の変数に突っ込んでたりするとうまく動かなくなる。</p>

<p>rc2 までは、promise がリターンされるとき、こんなふうに書けた。
<code>javascript controllers.js
$scope.values = NinjaService.getValues();
</code></p>

<p>rc3 からは、こう書かないと動かない。
<code>javascript controllers.js
NinjaService.getValues().then(function(values) {
  $scope.values = values;
});
</code></p>

<p>自動アンラップを採用しなくした理由は、この Issue でのやり取りに詳しく書かれている。</p>

<p><a href="https://github.com/angular/angular.js/issues/4158">Automatic unwrapping of promises by $parse severely limits its usefulness · Issue #4158 · angular/angular.js</a></p>

<p>この変更によって、前回のエントリーで書いた Angular UI の Typeahead も動作するようになったということ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS で Web API を呼び出すコードをまとめる]]></title>
    <link href="http://angularjsninja.com/blog/2013/08/29/angularjs-web-api-call/"/>
    <updated>2013-08-29T08:42:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/08/29/angularjs-web-api-call</id>
    <content type="html"><![CDATA[<hr />

<p>AngularJS で Web API を呼び出す $http などを利用するコードを、各 controller に散らして実装してしまわずに、どこかに集約しておきたいぞって場合の話。</p>

<!-- more -->


<p>``` javascript services.js
app.factory(&lsquo;NinjaService&rsquo;, function($http) {
  var search = function(params) {</p>

<pre><code>return $http.get('/search', {params: params}).then(function(response) {
  return response.data;
});
</code></pre>

<p>  };
  return {</p>

<pre><code>search: search
</code></pre>

<p>  };
});
```</p>

<p>``` javascript controllers.js
app.controller(&lsquo;NinjaController&rsquo;, function($scope, NinjaService) {
  $scope.search = function() {</p>

<pre><code>NinjaService.search(params).then(function(data) {
  $scope.results = data.results;
});
</code></pre>

<p>  };
});
```</p>

<p>こんな感じで、XxxService とかいう名前でサービスを factory 使って宣言しておけば、同じコードを複数の controller で利用したいときに便利だし、Web API 呼び出しのコードがまとまることで見通しやすくなる。</p>

<p>このコードに出てくる params については、search メソッドのクエリパラメータとして検索条件を渡してるイメージなだけで、詳細は省略。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS ではモデルをどう宣言すればいいのか]]></title>
    <link href="http://angularjsninja.com/blog/2013/08/28/how-to-declare-models/"/>
    <updated>2013-08-28T07:48:00+09:00</updated>
    <id>http://angularjsninja.com/blog/2013/08/28/how-to-declare-models</id>
    <content type="html"><![CDATA[<hr />

<h2>AngularJS の ng-model、大事なのは dot があること</h2>

<p>AngularJS では、モデルをどこに宣言すればいいんだってのがわかりにくい。</p>

<p>controller に $scope があって、簡単なサンプルコードでは大抵そこに直接<code>$scope.name</code>みたいに記述されているので、同じように書いてしまう。</p>

<!-- more -->


<p>うまくいかないコード例は以下。</p>

<p>``` html</p>

<!-- うまくいかないコード -->


<div ng-controller="ParentController">
  <input type="text" name="parent" ng-model="name">
  <div ng-controller="ChildController">
    <input type="text" name="child" ng-model="name">
  </div>
</div>


<p><code>
</code> javascript
app.controller(&lsquo;ParentController&rsquo;, function($scope) {});
app.controller(&lsquo;ChildController&rsquo;, function($scope) {});</p>

<p>```
このコードでは、parent テキストボックスに入力した値が child テキストボックスにも同期され、一見うまくいくように思ってしまう。ところが、一度でも child テキストボックスに値を入力すると、別のスコープになってその後まったく同期されなくなる。</p>

<p>うまくいくコードは以下。大事なのは dot があること。dot があることによって、参照が同じになって、両方のテキストボックスの値が同期され続ける。</p>

<p>``` html</p>

<!-- うまくいくコード -->


<div ng-controller="ParentController">
  <input type="text" name="parent" ng-model="aModel.name">
  <div ng-controller="ChildController">
    <input type="text" name="child" ng-model="aModel.name">
  </div>
</div>


<p>```</p>

<h2>AngularJS のモデルは factory で宣言</h2>

<p>さて、ちゃんとモデルを宣言したい場合はどう書けばいいのか。さきほどの例で言えば、aModel はどこでどう宣言しておくことができるのか。</p>

<p>答えは factory で、以下のようなコード。</p>

<p>``` javascript
app.factory(&lsquo;aModel&rsquo;, function() {
  return {</p>

<pre><code>name: ''
</code></pre>

<p>  };
});
```</p>

<p>これで、どこにだって DI して使えるようになるので、<strong>親子の関係にない controller 間でも同期</strong>させることができるモデルとなる。</p>

<p><code>javascript
app.controller('ExampleController', function($scope, aModel) {
  $scope.aModel = aModel;
}
</code></p>

<p>この factory のモデルはシングルトンです、はい。</p>

<p><code>app.controller</code>とか<code>app.factory</code>の app って何なのかとか、DI って何なのかとか基本的なところを飛ばしてますが、その辺はまたあらためて。</p>
]]></content>
  </entry>
  
</feed>
